
build/blank.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
       8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
       c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      18:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__vector_6>
      1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      2c:	0c 94 29 07 	jmp	0xe52	; 0xe52 <__vector_11>
      30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      38:	0c 94 89 06 	jmp	0xd12	; 0xd12 <__vector_14>
      3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      5c:	0c 94 4b 07 	jmp	0xe96	; 0xe96 <__vector_23>
      60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      68:	c9 01       	movw	r24, r18
      6a:	45 02       	muls	r20, r21
      6c:	9d 01       	movw	r18, r26
      6e:	94 01       	movw	r18, r8
      70:	9a 01       	movw	r18, r20
      72:	27 02       	muls	r18, r23
      74:	1c 02       	muls	r17, r28
      76:	a7 08       	sbc	r10, r7
      78:	8b 07       	cpc	r24, r27
      7a:	8b 07       	cpc	r24, r27
      7c:	a4 08       	sbc	r10, r4
      7e:	b0 08       	sbc	r11, r0
      80:	a0 08       	sbc	r10, r0
      82:	b7 08       	sbc	r11, r7
      84:	b3 08       	sbc	r11, r3
      86:	bb 08       	sbc	r11, r11
      88:	74 08       	sbc	r7, r4
      8a:	46 08       	sbc	r4, r6

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
    wdt_disable();
      9a:	88 e1       	ldi	r24, 0x18	; 24
      9c:	0f b6       	in	r0, 0x3f	; 63
      9e:	f8 94       	cli
      a0:	80 93 60 00 	sts	0x0060, r24
      a4:	10 92 60 00 	sts	0x0060, r1
      a8:	0f be       	out	0x3f, r0	; 63

000000aa <__do_copy_data>:
      aa:	11 e0       	ldi	r17, 0x01	; 1
      ac:	a0 e0       	ldi	r26, 0x00	; 0
      ae:	b1 e0       	ldi	r27, 0x01	; 1
      b0:	e6 ed       	ldi	r30, 0xD6	; 214
      b2:	f9 e1       	ldi	r31, 0x19	; 25
      b4:	02 c0       	rjmp	.+4      	; 0xba <__do_copy_data+0x10>
      b6:	05 90       	lpm	r0, Z+
      b8:	0d 92       	st	X+, r0
      ba:	ac 30       	cpi	r26, 0x0C	; 12
      bc:	b1 07       	cpc	r27, r17
      be:	d9 f7       	brne	.-10     	; 0xb6 <__do_copy_data+0xc>

000000c0 <__do_clear_bss>:
      c0:	11 e0       	ldi	r17, 0x01	; 1
      c2:	ac e0       	ldi	r26, 0x0C	; 12
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
      c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
      ca:	ae 36       	cpi	r26, 0x6E	; 110
      cc:	b1 07       	cpc	r27, r17
      ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
      d0:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <main>
      d4:	0c 94 e9 0c 	jmp	0x19d2	; 0x19d2 <_exit>

000000d8 <__bad_interrupt>:
      d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <setup>:
#include "kilolib.h"

void setup() {
      dc:	08 95       	ret

000000de <loop>:
    // put your setup code here, will be run once at the beginning
}

void loop() {
    // put your main code here, will be run repeatedly
    set_color(RGB(1,0,0));
      de:	81 e0       	ldi	r24, 0x01	; 1
      e0:	0e 94 05 07 	call	0xe0a	; 0xe0a <set_color>
    delay(100);
      e4:	84 e6       	ldi	r24, 0x64	; 100
      e6:	90 e0       	ldi	r25, 0x00	; 0
      e8:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <delay>
    set_color(RGB(0,1,0));
      ec:	84 e0       	ldi	r24, 0x04	; 4
      ee:	0e 94 05 07 	call	0xe0a	; 0xe0a <set_color>
    delay(100);
      f2:	84 e6       	ldi	r24, 0x64	; 100
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <delay>

000000fa <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
      fa:	08 95       	ret

000000fc <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
      fc:	80 e0       	ldi	r24, 0x00	; 0
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	08 95       	ret

00000102 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     102:	08 95       	ret

00000104 <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     104:	df 92       	push	r13
     106:	ef 92       	push	r14
     108:	ff 92       	push	r15
     10a:	0f 93       	push	r16
     10c:	1f 93       	push	r17
     10e:	cf 93       	push	r28
     110:	df 93       	push	r29
    cli();
     112:	f8 94       	cli

    ports_off();
     114:	14 b8       	out	0x04, r1	; 4
     116:	17 b8       	out	0x07, r1	; 7
     118:	1a b8       	out	0x0a, r1	; 10
     11a:	15 b8       	out	0x05, r1	; 5
     11c:	18 b8       	out	0x08, r1	; 8
     11e:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     120:	52 9a       	sbi	0x0a, 2	; 10
     122:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     124:	14 bc       	out	0x24, r1	; 36
     126:	85 e0       	ldi	r24, 0x05	; 5
     128:	85 bd       	out	0x25, r24	; 37
     12a:	8f ef       	ldi	r24, 0xFF	; 255
     12c:	87 bd       	out	0x27, r24	; 39
     12e:	22 e0       	ldi	r18, 0x02	; 2
     130:	20 93 6e 00 	sts	0x006E, r18
    rx_timer_setup();
     134:	10 92 80 00 	sts	0x0080, r1
     138:	10 92 81 00 	sts	0x0081, r1
     13c:	8f e8       	ldi	r24, 0x8F	; 143
     13e:	9b e0       	ldi	r25, 0x0B	; 11
     140:	90 93 89 00 	sts	0x0089, r25
     144:	80 93 88 00 	sts	0x0088, r24
     148:	20 93 6f 00 	sts	0x006F, r18
    motors_setup();
     14c:	53 98       	cbi	0x0a, 3	; 10
     14e:	23 98       	cbi	0x04, 3	; 4
     150:	81 ea       	ldi	r24, 0xA1	; 161
     152:	80 93 b0 00 	sts	0x00B0, r24
     156:	20 93 b1 00 	sts	0x00B1, r18
     15a:	10 92 b4 00 	sts	0x00B4, r1
     15e:	10 92 b3 00 	sts	0x00B3, r1
    acomp_setup();
     162:	8b e0       	ldi	r24, 0x0B	; 11
     164:	80 bf       	out	0x30, r24	; 48
     166:	83 e0       	ldi	r24, 0x03	; 3
     168:	80 93 7f 00 	sts	0x007F, r24
    adc_setup();
     16c:	86 e0       	ldi	r24, 0x06	; 6
     16e:	80 93 7c 00 	sts	0x007C, r24
     172:	83 e8       	ldi	r24, 0x83	; 131
     174:	80 93 7a 00 	sts	0x007A, r24
     178:	80 91 7a 00 	lds	r24, 0x007A
     17c:	80 64       	ori	r24, 0x40	; 64
     17e:	80 93 7a 00 	sts	0x007A, r24
     182:	80 91 7a 00 	lds	r24, 0x007A
     186:	86 fd       	sbrc	r24, 6
     188:	fc cf       	rjmp	.-8      	; 0x182 <kilo_init+0x7e>
    adc_trigger_high_gain();
     18a:	10 92 7c 00 	sts	0x007C, r1
     18e:	83 ea       	ldi	r24, 0xA3	; 163
     190:	80 93 7a 00 	sts	0x007A, r24
     194:	81 e0       	ldi	r24, 0x01	; 1
     196:	80 93 7b 00 	sts	0x007B, r24

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <__eerd_byte_m328p>
    if (osccal != 0xFF)
     1a2:	8f 3f       	cpi	r24, 0xFF	; 255
     1a4:	11 f0       	breq	.+4      	; 0x1aa <kilo_init+0xa6>
        OSCCAL = osccal;
     1a6:	80 93 66 00 	sts	0x0066, r24

    rx_busy = 0;
     1aa:	10 92 37 01 	sts	0x0137, r1
    rx_leadingbit = 1;
     1ae:	c1 e0       	ldi	r28, 0x01	; 1
     1b0:	c0 93 10 01 	sts	0x0110, r28
    rx_leadingbyte = 1;
     1b4:	c0 93 54 01 	sts	0x0154, r28
    rx_byteindex = 0;
     1b8:	10 92 2e 01 	sts	0x012E, r1
    rx_bytevalue = 0;
     1bc:	10 92 68 01 	sts	0x0168, r1
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     1c0:	80 e9       	ldi	r24, 0x90	; 144
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <__eerd_byte_m328p>
     1c8:	80 93 2d 01 	sts	0x012D, r24
    if (tx_mask & ~TX_MASK_MAX)
     1cc:	80 91 2d 01 	lds	r24, 0x012D
     1d0:	88 73       	andi	r24, 0x38	; 56
     1d2:	11 f0       	breq	.+4      	; 0x1d8 <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     1d4:	c0 93 2d 01 	sts	0x012D, r28
    tx_clock = 0;
     1d8:	10 92 58 01 	sts	0x0158, r1
     1dc:	10 92 57 01 	sts	0x0157, r1
    tx_increment = 255;
     1e0:	8f ef       	ldi	r24, 0xFF	; 255
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	90 93 56 01 	sts	0x0156, r25
     1e8:	80 93 55 01 	sts	0x0155, r24
    kilo_ticks = 0;
     1ec:	10 92 33 01 	sts	0x0133, r1
     1f0:	10 92 34 01 	sts	0x0134, r1
     1f4:	10 92 35 01 	sts	0x0135, r1
     1f8:	10 92 36 01 	sts	0x0136, r1
    kilo_state = IDLE;
     1fc:	81 e0       	ldi	r24, 0x01	; 1
     1fe:	80 93 0f 01 	sts	0x010F, r24
    kilo_tx_period = 3906;
     202:	82 e4       	ldi	r24, 0x42	; 66
     204:	9f e0       	ldi	r25, 0x0F	; 15
     206:	90 93 67 01 	sts	0x0167, r25
     20a:	80 93 66 01 	sts	0x0166, r24
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     20e:	80 eb       	ldi	r24, 0xB0	; 176
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <__eerd_byte_m328p>
     216:	c8 2f       	mov	r28, r24
     218:	81 eb       	ldi	r24, 0xB1	; 177
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <__eerd_byte_m328p>
     220:	2c 2f       	mov	r18, r28
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	38 2b       	or	r19, r24
     226:	30 93 6a 01 	sts	0x016A, r19
     22a:	20 93 69 01 	sts	0x0169, r18
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     22e:	85 e0       	ldi	r24, 0x05	; 5
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <__eerd_byte_m328p>
     236:	80 93 6d 01 	sts	0x016D, r24
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     23a:	89 e0       	ldi	r24, 0x09	; 9
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <__eerd_byte_m328p>
     242:	80 93 59 01 	sts	0x0159, r24
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     246:	8c e0       	ldi	r24, 0x0C	; 12
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <__eerd_byte_m328p>
     24e:	80 93 6b 01 	sts	0x016B, r24
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     252:	84 e1       	ldi	r24, 0x14	; 20
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <__eerd_byte_m328p>
     25a:	80 93 6c 01 	sts	0x016C, r24
     25e:	58 e3       	ldi	r21, 0x38	; 56
     260:	e5 2e       	mov	r14, r21
     262:	51 e0       	ldi	r21, 0x01	; 1
     264:	f5 2e       	mov	r15, r21
     266:	01 e1       	ldi	r16, 0x11	; 17
     268:	11 e0       	ldi	r17, 0x01	; 1
     26a:	c0 e2       	ldi	r28, 0x20	; 32
     26c:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     26e:	ce 01       	movw	r24, r28
     270:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <__eerd_byte_m328p>
     274:	d8 2e       	mov	r13, r24
     276:	ce 01       	movw	r24, r28
     278:	01 96       	adiw	r24, 0x01	; 1
     27a:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <__eerd_byte_m328p>
     27e:	2d 2d       	mov	r18, r13
     280:	30 e0       	ldi	r19, 0x00	; 0
     282:	32 2f       	mov	r19, r18
     284:	22 27       	eor	r18, r18
     286:	28 2b       	or	r18, r24
     288:	f7 01       	movw	r30, r14
     28a:	21 93       	st	Z+, r18
     28c:	31 93       	st	Z+, r19
     28e:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     290:	ce 01       	movw	r24, r28
     292:	c0 96       	adiw	r24, 0x30	; 48
     294:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <__eerd_byte_m328p>
     298:	d8 2e       	mov	r13, r24
     29a:	ce 01       	movw	r24, r28
     29c:	c1 96       	adiw	r24, 0x31	; 49
     29e:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <__eerd_byte_m328p>
     2a2:	2d 2d       	mov	r18, r13
     2a4:	30 e0       	ldi	r19, 0x00	; 0
     2a6:	32 2f       	mov	r19, r18
     2a8:	22 27       	eor	r18, r18
     2aa:	28 2b       	or	r18, r24
     2ac:	f8 01       	movw	r30, r16
     2ae:	21 93       	st	Z+, r18
     2b0:	31 93       	st	Z+, r19
     2b2:	8f 01       	movw	r16, r30
     2b4:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     2b6:	cc 33       	cpi	r28, 0x3C	; 60
     2b8:	d1 05       	cpc	r29, r1
     2ba:	c9 f6       	brne	.-78     	; 0x26e <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     2bc:	78 94       	sei
}
     2be:	df 91       	pop	r29
     2c0:	cf 91       	pop	r28
     2c2:	1f 91       	pop	r17
     2c4:	0f 91       	pop	r16
     2c6:	ff 90       	pop	r15
     2c8:	ef 90       	pop	r14
     2ca:	df 90       	pop	r13
     2cc:	08 95       	ret

000002ce <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     2ce:	1f 92       	push	r1
     2d0:	0f 92       	push	r0
     2d2:	0f b6       	in	r0, 0x3f	; 63
     2d4:	0f 92       	push	r0
     2d6:	11 24       	eor	r1, r1
     2d8:	8f 93       	push	r24
    wdt_disable();
     2da:	88 e1       	ldi	r24, 0x18	; 24
     2dc:	0f b6       	in	r0, 0x3f	; 63
     2de:	f8 94       	cli
     2e0:	80 93 60 00 	sts	0x0060, r24
     2e4:	10 92 60 00 	sts	0x0060, r1
     2e8:	0f be       	out	0x3f, r0	; 63
}
     2ea:	8f 91       	pop	r24
     2ec:	0f 90       	pop	r0
     2ee:	0f be       	out	0x3f, r0	; 63
     2f0:	0f 90       	pop	r0
     2f2:	1f 90       	pop	r1
     2f4:	18 95       	reti

000002f6 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     2f6:	3c 01       	movw	r6, r24
     2f8:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     2fa:	10 e0       	ldi	r17, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     2fc:	99 24       	eor	r9, r9
     2fe:	9a 94       	dec	r9
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     300:	84 e0       	ldi	r24, 0x04	; 4
     302:	c8 2e       	mov	r12, r24

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     304:	96 e0       	ldi	r25, 0x06	; 6
     306:	a9 2e       	mov	r10, r25
     308:	23 e8       	ldi	r18, 0x83	; 131
     30a:	b2 2e       	mov	r11, r18
            case SLEEPING:
                cli();
                acomp_off();
                adc_off();
                ports_off();
                wdt_enable(WDTO_8S);
     30c:	38 e1       	ldi	r19, 0x18	; 24
     30e:	d3 2e       	mov	r13, r19
     310:	49 e2       	ldi	r20, 0x29	; 41
     312:	e4 2e       	mov	r14, r20

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     314:	e0 91 0f 01 	lds	r30, 0x010F
     318:	f0 e0       	ldi	r31, 0x00	; 0
     31a:	e7 30       	cpi	r30, 0x07	; 7
     31c:	f1 05       	cpc	r31, r1
     31e:	d0 f7       	brcc	.-12     	; 0x314 <kilo_start+0x1e>
     320:	ec 5c       	subi	r30, 0xCC	; 204
     322:	ff 4f       	sbci	r31, 0xFF	; 255
     324:	0c 94 18 0a 	jmp	0x1430	; 0x1430 <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     328:	11 23       	and	r17, r17
     32a:	09 f4       	brne	.+2      	; 0x32e <kilo_start+0x38>
     32c:	fc c0       	rjmp	.+504    	; 0x526 <kilo_start+0x230>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     32e:	c0 92 0f 01 	sts	0x010F, r12
     332:	11 e0       	ldi	r17, 0x01	; 1
            case RUNNING:
                loop();
     334:	fe 01       	movw	r30, r28
     336:	09 95       	icall
                break;
     338:	ed cf       	rjmp	.-38     	; 0x314 <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     33a:	80 91 37 01 	lds	r24, 0x0137
     33e:	81 11       	cpse	r24, r1
     340:	eb c0       	rjmp	.+470    	; 0x518 <kilo_start+0x222>
        cli();                                    // disable interrupts
     342:	f8 94       	cli
        adc_setup_conversion(6);
     344:	a0 92 7c 00 	sts	0x007C, r10
     348:	b0 92 7a 00 	sts	0x007A, r11
        adc_start_conversion();
     34c:	80 91 7a 00 	lds	r24, 0x007A
     350:	80 64       	ori	r24, 0x40	; 64
     352:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     356:	80 91 7a 00 	lds	r24, 0x007A
     35a:	86 fd       	sbrc	r24, 6
     35c:	fc cf       	rjmp	.-8      	; 0x356 <kilo_start+0x60>
        voltage = ADCW;                           // store AD result
     35e:	20 91 78 00 	lds	r18, 0x0078
     362:	30 91 79 00 	lds	r19, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     366:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     368:	2b 3a       	cpi	r18, 0xAB	; 171
     36a:	92 e0       	ldi	r25, 0x02	; 2
     36c:	39 07       	cpc	r19, r25
     36e:	0c f0       	brlt	.+2      	; 0x372 <kilo_start+0x7c>
     370:	ed c0       	rjmp	.+474    	; 0x54c <kilo_start+0x256>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     372:	29 38       	cpi	r18, 0x89	; 137
     374:	e2 e0       	ldi	r30, 0x02	; 2
     376:	3e 07       	cpc	r19, r30
     378:	0c f0       	brlt	.+2      	; 0x37c <kilo_start+0x86>
     37a:	ef c0       	rjmp	.+478    	; 0x55a <kilo_start+0x264>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     37c:	27 36       	cpi	r18, 0x67	; 103
     37e:	32 40       	sbci	r19, 0x02	; 2
     380:	0c f4       	brge	.+2      	; 0x384 <kilo_start+0x8e>
     382:	ca c0       	rjmp	.+404    	; 0x518 <kilo_start+0x222>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     384:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     386:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     388:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     38a:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     38c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     38e:	3c 98       	cbi	0x07, 4	; 7
     390:	c1 cf       	rjmp	.-126    	; 0x314 <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     392:	f8 94       	cli
                acomp_off();
     394:	80 b7       	in	r24, 0x30	; 48
     396:	87 7f       	andi	r24, 0xF7	; 247
     398:	80 bf       	out	0x30, r24	; 48
                adc_off();
     39a:	80 91 7a 00 	lds	r24, 0x007A
     39e:	8f 77       	andi	r24, 0x7F	; 127
     3a0:	80 93 7a 00 	sts	0x007A, r24
                ports_off();
     3a4:	14 b8       	out	0x04, r1	; 4
     3a6:	17 b8       	out	0x07, r1	; 7
     3a8:	1a b8       	out	0x0a, r1	; 10
     3aa:	15 b8       	out	0x05, r1	; 5
     3ac:	18 b8       	out	0x08, r1	; 8
     3ae:	1b b8       	out	0x0b, r1	; 11
                wdt_enable(WDTO_8S);
     3b0:	0f b6       	in	r0, 0x3f	; 63
     3b2:	f8 94       	cli
     3b4:	a8 95       	wdr
     3b6:	d0 92 60 00 	sts	0x0060, r13
     3ba:	0f be       	out	0x3f, r0	; 63
     3bc:	e0 92 60 00 	sts	0x0060, r14
                WDTCSR |= (1<<WDIE);
     3c0:	80 91 60 00 	lds	r24, 0x0060
     3c4:	80 64       	ori	r24, 0x40	; 64
     3c6:	80 93 60 00 	sts	0x0060, r24
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     3ca:	83 b7       	in	r24, 0x33	; 51
     3cc:	81 7f       	andi	r24, 0xF1	; 241
     3ce:	84 60       	ori	r24, 0x04	; 4
     3d0:	83 bf       	out	0x33, r24	; 51
                cli();
     3d2:	f8 94       	cli
                sleep_enable();
     3d4:	83 b7       	in	r24, 0x33	; 51
     3d6:	81 60       	ori	r24, 0x01	; 1
     3d8:	83 bf       	out	0x33, r24	; 51
                sei();
     3da:	78 94       	sei
                sleep_cpu();
     3dc:	88 95       	sleep
                sleep_disable();
     3de:	83 b7       	in	r24, 0x33	; 51
     3e0:	8e 7f       	andi	r24, 0xFE	; 254
     3e2:	83 bf       	out	0x33, r24	; 51
                sei();
     3e4:	78 94       	sei
                rx_busy = 0;
     3e6:	10 92 37 01 	sts	0x0137, r1
                ports_on();
     3ea:	52 9a       	sbi	0x0a, 2	; 10
     3ec:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     3ee:	80 91 7a 00 	lds	r24, 0x007A
     3f2:	80 68       	ori	r24, 0x80	; 128
     3f4:	80 93 7a 00 	sts	0x007A, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3f8:	87 e5       	ldi	r24, 0x57	; 87
     3fa:	92 e0       	ldi	r25, 0x02	; 2
     3fc:	01 97       	sbiw	r24, 0x01	; 1
     3fe:	f1 f7       	brne	.-4      	; 0x3fc <kilo_start+0x106>
     400:	00 c0       	rjmp	.+0      	; 0x402 <kilo_start+0x10c>
     402:	00 00       	nop
                _delay_us(300);
                acomp_on();
     404:	80 b7       	in	r24, 0x30	; 48
     406:	88 61       	ori	r24, 0x18	; 24
     408:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     40a:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     40c:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     40e:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     410:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     412:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     414:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     416:	ef e1       	ldi	r30, 0x1F	; 31
     418:	fe e4       	ldi	r31, 0x4E	; 78
     41a:	31 97       	sbiw	r30, 0x01	; 1
     41c:	f1 f7       	brne	.-4      	; 0x41a <kilo_start+0x124>
     41e:	00 c0       	rjmp	.+0      	; 0x420 <kilo_start+0x12a>
     420:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     422:	80 91 37 01 	lds	r24, 0x0137
     426:	81 11       	cpse	r24, r1
     428:	81 c0       	rjmp	.+258    	; 0x52c <kilo_start+0x236>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     42a:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     42c:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     42e:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     430:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     432:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     434:	3c 98       	cbi	0x07, 4	; 7
     436:	6e cf       	rjmp	.-292    	; 0x314 <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     438:	80 91 0d 01 	lds	r24, 0x010D
     43c:	81 11       	cpse	r24, r1
     43e:	41 c0       	rjmp	.+130    	; 0x4c2 <kilo_start+0x1cc>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     440:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     444:	10 92 b4 00 	sts	0x00B4, r1
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     448:	10 92 0e 01 	sts	0x010E, r1
     44c:	63 cf       	rjmp	.-314    	; 0x314 <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     44e:	48 99       	sbic	0x09, 0	; 9
     450:	ec cf       	rjmp	.-40     	; 0x42a <kilo_start+0x134>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     452:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     454:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     456:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     458:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     45a:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     45c:	3c 98       	cbi	0x07, 4	; 7
     45e:	8f ec       	ldi	r24, 0xCF	; 207
     460:	97 e0       	ldi	r25, 0x07	; 7
     462:	01 97       	sbiw	r24, 0x01	; 1
     464:	f1 f7       	brne	.-4      	; 0x462 <kilo_start+0x16c>
     466:	00 c0       	rjmp	.+0      	; 0x468 <kilo_start+0x172>
     468:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     46a:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     46c:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     46e:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     470:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     472:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     474:	3c 98       	cbi	0x07, 4	; 7
     476:	9f ef       	ldi	r25, 0xFF	; 255
     478:	e1 ee       	ldi	r30, 0xE1	; 225
     47a:	f4 e0       	ldi	r31, 0x04	; 4
     47c:	91 50       	subi	r25, 0x01	; 1
     47e:	e0 40       	sbci	r30, 0x00	; 0
     480:	f0 40       	sbci	r31, 0x00	; 0
     482:	e1 f7       	brne	.-8      	; 0x47c <kilo_start+0x186>
     484:	00 c0       	rjmp	.+0      	; 0x486 <kilo_start+0x190>
     486:	00 00       	nop
     488:	45 cf       	rjmp	.-374    	; 0x314 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     48a:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     48c:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     48e:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     490:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     492:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     494:	3c 98       	cbi	0x07, 4	; 7
     496:	ef ec       	ldi	r30, 0xCF	; 207
     498:	f7 e0       	ldi	r31, 0x07	; 7
     49a:	31 97       	sbiw	r30, 0x01	; 1
     49c:	f1 f7       	brne	.-4      	; 0x49a <kilo_start+0x1a4>
     49e:	00 c0       	rjmp	.+0      	; 0x4a0 <kilo_start+0x1aa>
     4a0:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     4a2:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     4a4:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     4a6:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     4a8:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     4aa:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     4ac:	3c 98       	cbi	0x07, 4	; 7
     4ae:	ff ef       	ldi	r31, 0xFF	; 255
     4b0:	21 ee       	ldi	r18, 0xE1	; 225
     4b2:	84 e0       	ldi	r24, 0x04	; 4
     4b4:	f1 50       	subi	r31, 0x01	; 1
     4b6:	20 40       	sbci	r18, 0x00	; 0
     4b8:	80 40       	sbci	r24, 0x00	; 0
     4ba:	e1 f7       	brne	.-8      	; 0x4b4 <kilo_start+0x1be>
     4bc:	00 c0       	rjmp	.+0      	; 0x4be <kilo_start+0x1c8>
     4be:	00 00       	nop
     4c0:	29 cf       	rjmp	.-430    	; 0x314 <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     4c2:	90 91 0d 01 	lds	r25, 0x010D
     4c6:	80 91 0e 01 	lds	r24, 0x010E
     4ca:	98 17       	cp	r25, r24
     4cc:	09 f4       	brne	.+2      	; 0x4d0 <kilo_start+0x1da>
     4ce:	22 cf       	rjmp	.-444    	; 0x314 <kilo_start+0x1e>
                        prev_motion = cur_motion;
     4d0:	80 91 0d 01 	lds	r24, 0x010D
     4d4:	80 93 0e 01 	sts	0x010E, r24
                        if (cur_motion == MOVE_LEFT) {
     4d8:	80 91 0d 01 	lds	r24, 0x010D
     4dc:	81 30       	cpi	r24, 0x01	; 1
     4de:	09 f4       	brne	.+2      	; 0x4e2 <kilo_start+0x1ec>
     4e0:	50 c0       	rjmp	.+160    	; 0x582 <kilo_start+0x28c>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     4e2:	80 91 0d 01 	lds	r24, 0x010D
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     4e6:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     4ea:	90 92 b4 00 	sts	0x00B4, r9
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     4ee:	82 30       	cpi	r24, 0x02	; 2
     4f0:	d9 f1       	breq	.+118    	; 0x568 <kilo_start+0x272>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     4f2:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     4f6:	90 92 b4 00 	sts	0x00B4, r9
     4fa:	8f e2       	ldi	r24, 0x2F	; 47
     4fc:	95 e7       	ldi	r25, 0x75	; 117
     4fe:	01 97       	sbiw	r24, 0x01	; 1
     500:	f1 f7       	brne	.-4      	; 0x4fe <kilo_start+0x208>
     502:	00 c0       	rjmp	.+0      	; 0x504 <kilo_start+0x20e>
     504:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     506:	80 91 6c 01 	lds	r24, 0x016C
     50a:	90 91 6b 01 	lds	r25, 0x016B
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     50e:	90 93 b3 00 	sts	0x00B3, r25
    OCR2B = cw;
     512:	80 93 b4 00 	sts	0x00B4, r24
     516:	fe ce       	rjmp	.-516    	; 0x314 <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     518:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     51a:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     51c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     51e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     520:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     522:	3c 98       	cbi	0x07, 4	; 7
     524:	f7 ce       	rjmp	.-530    	; 0x314 <kilo_start+0x1e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     526:	f3 01       	movw	r30, r6
     528:	09 95       	icall
     52a:	01 cf       	rjmp	.-510    	; 0x32e <kilo_start+0x38>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     52c:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     52e:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     530:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     532:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     534:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     536:	3c 98       	cbi	0x07, 4	; 7
     538:	ff ef       	ldi	r31, 0xFF	; 255
     53a:	20 e7       	ldi	r18, 0x70	; 112
     53c:	82 e0       	ldi	r24, 0x02	; 2
     53e:	f1 50       	subi	r31, 0x01	; 1
     540:	20 40       	sbci	r18, 0x00	; 0
     542:	80 40       	sbci	r24, 0x00	; 0
     544:	e1 f7       	brne	.-8      	; 0x53e <kilo_start+0x248>
     546:	00 c0       	rjmp	.+0      	; 0x548 <kilo_start+0x252>
     548:	00 00       	nop
     54a:	6f cf       	rjmp	.-290    	; 0x42a <kilo_start+0x134>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     54c:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     54e:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     550:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     552:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     554:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     556:	3c 98       	cbi	0x07, 4	; 7
     558:	dd ce       	rjmp	.-582    	; 0x314 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     55a:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     55c:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     55e:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     560:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     562:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     564:	3c 9a       	sbi	0x07, 4	; 7
     566:	d6 ce       	rjmp	.-596    	; 0x314 <kilo_start+0x1e>
     568:	ef e2       	ldi	r30, 0x2F	; 47
     56a:	f5 e7       	ldi	r31, 0x75	; 117
     56c:	31 97       	sbiw	r30, 0x01	; 1
     56e:	f1 f7       	brne	.-4      	; 0x56c <kilo_start+0x276>
     570:	00 c0       	rjmp	.+0      	; 0x572 <kilo_start+0x27c>
     572:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     574:	80 91 59 01 	lds	r24, 0x0159
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     578:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B = cw;
     57c:	80 93 b4 00 	sts	0x00B4, r24
     580:	c9 ce       	rjmp	.-622    	; 0x314 <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     582:	90 92 b3 00 	sts	0x00B3, r9
    OCR2B = cw;
     586:	10 92 b4 00 	sts	0x00B4, r1
     58a:	8f e2       	ldi	r24, 0x2F	; 47
     58c:	95 e7       	ldi	r25, 0x75	; 117
     58e:	01 97       	sbiw	r24, 0x01	; 1
     590:	f1 f7       	brne	.-4      	; 0x58e <kilo_start+0x298>
     592:	00 c0       	rjmp	.+0      	; 0x594 <kilo_start+0x29e>
     594:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     596:	80 91 6d 01 	lds	r24, 0x016D
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     59a:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     59e:	10 92 b4 00 	sts	0x00B4, r1
     5a2:	b8 ce       	rjmp	.-656    	; 0x314 <kilo_start+0x1e>

000005a4 <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
     5a4:	07 c0       	rjmp	.+14     	; 0x5b4 <delay+0x10>
     5a6:	ef ec       	ldi	r30, 0xCF	; 207
     5a8:	f7 e0       	ldi	r31, 0x07	; 7
     5aa:	31 97       	sbiw	r30, 0x01	; 1
     5ac:	f1 f7       	brne	.-4      	; 0x5aa <delay+0x6>
     5ae:	00 c0       	rjmp	.+0      	; 0x5b0 <delay+0xc>
     5b0:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     5b2:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     5b4:	00 97       	sbiw	r24, 0x00	; 0
     5b6:	b9 f7       	brne	.-18     	; 0x5a6 <delay+0x2>
     5b8:	08 95       	ret

000005ba <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5ba:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     5be:	60 93 b4 00 	sts	0x00B4, r22
     5c2:	08 95       	ret

000005c4 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5c4:	8f ef       	ldi	r24, 0xFF	; 255
     5c6:	80 93 b3 00 	sts	0x00B3, r24
    OCR2B = cw;
     5ca:	80 93 b4 00 	sts	0x00B4, r24
     5ce:	8f e0       	ldi	r24, 0x0F	; 15
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	ef ec       	ldi	r30, 0xCF	; 207
     5d4:	f7 e0       	ldi	r31, 0x07	; 7
     5d6:	31 97       	sbiw	r30, 0x01	; 1
     5d8:	f1 f7       	brne	.-4      	; 0x5d6 <spinup_motors+0x12>
     5da:	00 c0       	rjmp	.+0      	; 0x5dc <spinup_motors+0x18>
     5dc:	00 00       	nop
     5de:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     5e0:	c1 f7       	brne	.-16     	; 0x5d2 <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     5e2:	08 95       	ret

000005e4 <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     5e4:	80 91 37 01 	lds	r24, 0x0137
     5e8:	81 11       	cpse	r24, r1
     5ea:	1e c0       	rjmp	.+60     	; 0x628 <get_ambientlight+0x44>
        cli();
     5ec:	f8 94       	cli
        adc_setup_conversion(7);
     5ee:	87 e0       	ldi	r24, 0x07	; 7
     5f0:	80 93 7c 00 	sts	0x007C, r24
     5f4:	83 e8       	ldi	r24, 0x83	; 131
     5f6:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     5fa:	80 91 7a 00 	lds	r24, 0x007A
     5fe:	80 64       	ori	r24, 0x40	; 64
     600:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     604:	80 91 7a 00 	lds	r24, 0x007A
     608:	86 fd       	sbrc	r24, 6
     60a:	fc cf       	rjmp	.-8      	; 0x604 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     60c:	80 91 78 00 	lds	r24, 0x0078
     610:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     614:	10 92 7c 00 	sts	0x007C, r1
     618:	23 ea       	ldi	r18, 0xA3	; 163
     61a:	20 93 7a 00 	sts	0x007A, r18
     61e:	21 e0       	ldi	r18, 0x01	; 1
     620:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     624:	78 94       	sei
     626:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     628:	8f ef       	ldi	r24, 0xFF	; 255
     62a:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     62c:	08 95       	ret

0000062e <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     62e:	80 91 37 01 	lds	r24, 0x0137
     632:	81 11       	cpse	r24, r1
     634:	1e c0       	rjmp	.+60     	; 0x672 <get_temperature+0x44>
        cli();
     636:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     638:	88 ec       	ldi	r24, 0xC8	; 200
     63a:	80 93 7c 00 	sts	0x007C, r24
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     63e:	87 e8       	ldi	r24, 0x87	; 135
     640:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     644:	80 91 7a 00 	lds	r24, 0x007A
     648:	80 64       	ori	r24, 0x40	; 64
     64a:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     64e:	80 91 7a 00 	lds	r24, 0x007A
     652:	86 fd       	sbrc	r24, 6
     654:	fc cf       	rjmp	.-8      	; 0x64e <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     656:	80 91 78 00 	lds	r24, 0x0078
     65a:	90 91 79 00 	lds	r25, 0x0079
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     65e:	10 92 7c 00 	sts	0x007C, r1
     662:	23 ea       	ldi	r18, 0xA3	; 163
     664:	20 93 7a 00 	sts	0x007A, r18
     668:	21 e0       	ldi	r18, 0x01	; 1
     66a:	20 93 7b 00 	sts	0x007B, r18
        sei();                                    // reenable interrupts
     66e:	78 94       	sei
     670:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     672:	8f ef       	ldi	r24, 0xFF	; 255
     674:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     676:	08 95       	ret

00000678 <rand_hard>:

uint8_t rand_hard() {
     678:	1f 93       	push	r17
     67a:	cf 93       	push	r28
     67c:	df 93       	push	r29
     67e:	60 e0       	ldi	r22, 0x00	; 0
     680:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t num = 0;
     682:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     684:	13 ea       	ldi	r17, 0xA3	; 163
     686:	d1 e0       	ldi	r29, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     688:	c6 e0       	ldi	r28, 0x06	; 6
     68a:	b3 e8       	ldi	r27, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     68c:	e1 e0       	ldi	r30, 0x01	; 1
     68e:	f0 e0       	ldi	r31, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     690:	20 e8       	ldi	r18, 0x80	; 128
     692:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     694:	f8 94       	cli
            adc_setup_conversion(6);
     696:	c0 93 7c 00 	sts	0x007C, r28
     69a:	b0 93 7a 00 	sts	0x007A, r27
            adc_start_conversion();
     69e:	90 91 7a 00 	lds	r25, 0x007A
     6a2:	90 64       	ori	r25, 0x40	; 64
     6a4:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     6a8:	90 91 7a 00 	lds	r25, 0x007A
     6ac:	96 fd       	sbrc	r25, 6
     6ae:	fc cf       	rjmp	.-8      	; 0x6a8 <rand_hard+0x30>
            a = ADCW&0x1;
     6b0:	40 91 78 00 	lds	r20, 0x0078
     6b4:	50 91 79 00 	lds	r21, 0x0079
     6b8:	a4 2f       	mov	r26, r20
     6ba:	a1 70       	andi	r26, 0x01	; 1
            adc_start_conversion();
     6bc:	90 91 7a 00 	lds	r25, 0x007A
     6c0:	90 64       	ori	r25, 0x40	; 64
     6c2:	90 93 7a 00 	sts	0x007A, r25
            adc_finish_conversion();
     6c6:	90 91 7a 00 	lds	r25, 0x007A
     6ca:	96 fd       	sbrc	r25, 6
     6cc:	fc cf       	rjmp	.-8      	; 0x6c6 <rand_hard+0x4e>
            b = ADCW&0x1;
     6ce:	40 91 78 00 	lds	r20, 0x0078
     6d2:	50 91 79 00 	lds	r21, 0x0079
            adc_trigger_high_gain();
     6d6:	10 92 7c 00 	sts	0x007C, r1
     6da:	10 93 7a 00 	sts	0x007A, r17
     6de:	d0 93 7b 00 	sts	0x007B, r29
            sei();
     6e2:	78 94       	sei
            adc_start_conversion();
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
     6e4:	41 70       	andi	r20, 0x01	; 1
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
     6e6:	a4 13       	cpse	r26, r20
     6e8:	03 c0       	rjmp	.+6      	; 0x6f0 <rand_hard+0x78>
     6ea:	21 50       	subi	r18, 0x01	; 1
     6ec:	31 09       	sbc	r19, r1
     6ee:	91 f6       	brne	.-92     	; 0x694 <rand_hard+0x1c>
        if (a)
     6f0:	aa 23       	and	r26, r26
     6f2:	39 f0       	breq	.+14     	; 0x702 <rand_hard+0x8a>
            num |= (1<<i);
     6f4:	9f 01       	movw	r18, r30
     6f6:	06 2e       	mov	r0, r22
     6f8:	01 c0       	rjmp	.+2      	; 0x6fc <rand_hard+0x84>
     6fa:	22 0f       	add	r18, r18
     6fc:	0a 94       	dec	r0
     6fe:	ea f7       	brpl	.-6      	; 0x6fa <rand_hard+0x82>
     700:	82 2b       	or	r24, r18
     702:	6f 5f       	subi	r22, 0xFF	; 255
     704:	7f 4f       	sbci	r23, 0xFF	; 255
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     706:	68 30       	cpi	r22, 0x08	; 8
     708:	71 05       	cpc	r23, r1
     70a:	09 f0       	breq	.+2      	; 0x70e <rand_hard+0x96>
     70c:	c1 cf       	rjmp	.-126    	; 0x690 <rand_hard+0x18>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     70e:	df 91       	pop	r29
     710:	cf 91       	pop	r28
     712:	1f 91       	pop	r17
     714:	08 95       	ret

00000716 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     716:	80 91 00 01 	lds	r24, 0x0100
     71a:	98 2f       	mov	r25, r24
     71c:	99 0f       	add	r25, r25
     71e:	99 0f       	add	r25, r25
     720:	99 0f       	add	r25, r25
     722:	98 27       	eor	r25, r24
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     724:	80 91 0c 01 	lds	r24, 0x010C
     728:	21 e0       	ldi	r18, 0x01	; 1
     72a:	28 0f       	add	r18, r24
     72c:	20 93 0c 01 	sts	0x010C, r18
     730:	86 95       	lsr	r24
     732:	86 95       	lsr	r24

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
    seed ^= seed>>5;
     734:	89 27       	eor	r24, r25
     736:	92 95       	swap	r25
     738:	96 95       	lsr	r25
     73a:	97 70       	andi	r25, 0x07	; 7
    seed ^= accumulator++>>2;
     73c:	89 27       	eor	r24, r25
     73e:	80 93 00 01 	sts	0x0100, r24
    return seed;
}
     742:	08 95       	ret

00000744 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     744:	80 93 00 01 	sts	0x0100, r24
     748:	08 95       	ret

0000074a <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     74a:	80 91 37 01 	lds	r24, 0x0137
     74e:	81 11       	cpse	r24, r1
     750:	16 c0       	rjmp	.+44     	; 0x77e <get_voltage+0x34>
        cli();                                    // disable interrupts
     752:	f8 94       	cli
        adc_setup_conversion(6);
     754:	86 e0       	ldi	r24, 0x06	; 6
     756:	80 93 7c 00 	sts	0x007C, r24
     75a:	83 e8       	ldi	r24, 0x83	; 131
     75c:	80 93 7a 00 	sts	0x007A, r24
        adc_start_conversion();
     760:	80 91 7a 00 	lds	r24, 0x007A
     764:	80 64       	ori	r24, 0x40	; 64
     766:	80 93 7a 00 	sts	0x007A, r24
        adc_finish_conversion();
     76a:	80 91 7a 00 	lds	r24, 0x007A
     76e:	86 fd       	sbrc	r24, 6
     770:	fc cf       	rjmp	.-8      	; 0x76a <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     772:	80 91 78 00 	lds	r24, 0x0078
     776:	90 91 79 00 	lds	r25, 0x0079
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     77a:	78 94       	sei
     77c:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     77e:	8f ef       	ldi	r24, 0xFF	; 255
     780:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     782:	08 95       	ret

00000784 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     784:	2f 92       	push	r2
     786:	3f 92       	push	r3
     788:	4f 92       	push	r4
     78a:	5f 92       	push	r5
     78c:	6f 92       	push	r6
     78e:	7f 92       	push	r7
     790:	8f 92       	push	r8
     792:	9f 92       	push	r9
     794:	af 92       	push	r10
     796:	bf 92       	push	r11
     798:	cf 92       	push	r12
     79a:	df 92       	push	r13
     79c:	ef 92       	push	r14
     79e:	ff 92       	push	r15
     7a0:	0f 93       	push	r16
     7a2:	1f 93       	push	r17
     7a4:	cf 93       	push	r28
     7a6:	df 93       	push	r29
     7a8:	00 d0       	rcall	.+0      	; 0x7aa <estimate_distance+0x26>
     7aa:	00 d0       	rcall	.+0      	; 0x7ac <estimate_distance+0x28>
     7ac:	00 d0       	rcall	.+0      	; 0x7ae <estimate_distance+0x2a>
     7ae:	cd b7       	in	r28, 0x3d	; 61
     7b0:	de b7       	in	r29, 0x3e	; 62
     7b2:	8c 01       	movw	r16, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     7b4:	dc 01       	movw	r26, r24
     7b6:	12 96       	adiw	r26, 0x02	; 2
     7b8:	0d 90       	ld	r0, X+
     7ba:	bc 91       	ld	r27, X
     7bc:	a0 2d       	mov	r26, r0
     7be:	be 83       	std	Y+6, r27	; 0x06
     7c0:	ad 83       	std	Y+5, r26	; 0x05
     7c2:	a4 38       	cpi	r26, 0x84	; 132
     7c4:	e3 e0       	ldi	r30, 0x03	; 3
     7c6:	be 07       	cpc	r27, r30
     7c8:	0c f0       	brlt	.+2      	; 0x7cc <estimate_distance+0x48>
     7ca:	ca c0       	rjmp	.+404    	; 0x960 <__stack+0x61>
        if (dist->high_gain > kilo_irhigh[0]) {
     7cc:	80 91 11 01 	lds	r24, 0x0111
     7d0:	90 91 12 01 	lds	r25, 0x0112
     7d4:	8a 17       	cp	r24, r26
     7d6:	9b 07       	cpc	r25, r27
     7d8:	08 f4       	brcc	.+2      	; 0x7dc <estimate_distance+0x58>
     7da:	a9 c1       	rjmp	.+850    	; 0xb2e <__stack+0x22f>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     7dc:	60 90 13 01 	lds	r6, 0x0113
     7e0:	70 90 14 01 	lds	r7, 0x0114
     7e4:	6a 16       	cp	r6, r26
     7e6:	7b 06       	cpc	r7, r27
     7e8:	08 f4       	brcc	.+2      	; 0x7ec <estimate_distance+0x68>
     7ea:	27 c2       	rjmp	.+1102   	; 0xc3a <__stack+0x33b>
     7ec:	60 90 15 01 	lds	r6, 0x0115
     7f0:	70 90 16 01 	lds	r7, 0x0116
     7f4:	6a 16       	cp	r6, r26
     7f6:	7b 06       	cpc	r7, r27
     7f8:	08 f4       	brcc	.+2      	; 0x7fc <estimate_distance+0x78>
     7fa:	28 c2       	rjmp	.+1104   	; 0xc4c <__stack+0x34d>
     7fc:	60 90 17 01 	lds	r6, 0x0117
     800:	70 90 18 01 	lds	r7, 0x0118
     804:	6a 16       	cp	r6, r26
     806:	7b 06       	cpc	r7, r27
     808:	08 f4       	brcc	.+2      	; 0x80c <estimate_distance+0x88>
     80a:	29 c2       	rjmp	.+1106   	; 0xc5e <__stack+0x35f>
     80c:	60 90 19 01 	lds	r6, 0x0119
     810:	70 90 1a 01 	lds	r7, 0x011A
     814:	6a 16       	cp	r6, r26
     816:	7b 06       	cpc	r7, r27
     818:	08 f4       	brcc	.+2      	; 0x81c <estimate_distance+0x98>
     81a:	2a c2       	rjmp	.+1108   	; 0xc70 <__stack+0x371>
     81c:	60 90 1b 01 	lds	r6, 0x011B
     820:	70 90 1c 01 	lds	r7, 0x011C
     824:	6a 16       	cp	r6, r26
     826:	7b 06       	cpc	r7, r27
     828:	08 f4       	brcc	.+2      	; 0x82c <estimate_distance+0xa8>
     82a:	8b c1       	rjmp	.+790    	; 0xb42 <__stack+0x243>
     82c:	60 90 1d 01 	lds	r6, 0x011D
     830:	70 90 1e 01 	lds	r7, 0x011E
     834:	6a 16       	cp	r6, r26
     836:	7b 06       	cpc	r7, r27
     838:	08 f4       	brcc	.+2      	; 0x83c <estimate_distance+0xb8>
     83a:	23 c2       	rjmp	.+1094   	; 0xc82 <__stack+0x383>
     83c:	60 90 1f 01 	lds	r6, 0x011F
     840:	70 90 20 01 	lds	r7, 0x0120
     844:	6a 16       	cp	r6, r26
     846:	7b 06       	cpc	r7, r27
     848:	08 f4       	brcc	.+2      	; 0x84c <estimate_distance+0xc8>
     84a:	24 c2       	rjmp	.+1096   	; 0xc94 <__stack+0x395>
     84c:	60 90 21 01 	lds	r6, 0x0121
     850:	70 90 22 01 	lds	r7, 0x0122
     854:	6a 16       	cp	r6, r26
     856:	7b 06       	cpc	r7, r27
     858:	08 f4       	brcc	.+2      	; 0x85c <estimate_distance+0xd8>
     85a:	25 c2       	rjmp	.+1098   	; 0xca6 <__stack+0x3a7>
     85c:	60 90 23 01 	lds	r6, 0x0123
     860:	70 90 24 01 	lds	r7, 0x0124
     864:	6a 16       	cp	r6, r26
     866:	7b 06       	cpc	r7, r27
     868:	08 f4       	brcc	.+2      	; 0x86c <estimate_distance+0xe8>
     86a:	26 c2       	rjmp	.+1100   	; 0xcb8 <__stack+0x3b9>
     86c:	60 90 25 01 	lds	r6, 0x0125
     870:	70 90 26 01 	lds	r7, 0x0126
     874:	6a 16       	cp	r6, r26
     876:	7b 06       	cpc	r7, r27
     878:	08 f4       	brcc	.+2      	; 0x87c <estimate_distance+0xf8>
     87a:	27 c2       	rjmp	.+1102   	; 0xcca <__stack+0x3cb>
     87c:	60 90 27 01 	lds	r6, 0x0127
     880:	70 90 28 01 	lds	r7, 0x0128
     884:	6a 16       	cp	r6, r26
     886:	7b 06       	cpc	r7, r27
     888:	08 f4       	brcc	.+2      	; 0x88c <estimate_distance+0x108>
     88a:	2d c2       	rjmp	.+1114   	; 0xce6 <__stack+0x3e7>
     88c:	60 90 29 01 	lds	r6, 0x0129
     890:	70 90 2a 01 	lds	r7, 0x012A
     894:	6a 16       	cp	r6, r26
     896:	7b 06       	cpc	r7, r27
     898:	08 f4       	brcc	.+2      	; 0x89c <estimate_distance+0x118>
     89a:	2e c2       	rjmp	.+1116   	; 0xcf8 <__stack+0x3f9>
     89c:	60 90 2b 01 	lds	r6, 0x012B
     8a0:	70 90 2c 01 	lds	r7, 0x012C
     8a4:	6a 16       	cp	r6, r26
     8a6:	7b 06       	cpc	r7, r27
     8a8:	08 f4       	brcc	.+2      	; 0x8ac <estimate_distance+0x128>
     8aa:	2f c2       	rjmp	.+1118   	; 0xd0a <__stack+0x40b>
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	a0 ed       	ldi	r26, 0xD0	; 208
     8b2:	b0 e4       	ldi	r27, 0x40	; 64
     8b4:	89 83       	std	Y+1, r24	; 0x01
     8b6:	9a 83       	std	Y+2, r25	; 0x02
     8b8:	ab 83       	std	Y+3, r26	; 0x03
     8ba:	bc 83       	std	Y+4, r27	; 0x04
     8bc:	2c e0       	ldi	r18, 0x0C	; 12
     8be:	e2 2e       	mov	r14, r18
     8c0:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     8c2:	f7 01       	movw	r30, r14
     8c4:	ee 0f       	add	r30, r30
     8c6:	ff 1f       	adc	r31, r31
     8c8:	ef 5e       	subi	r30, 0xEF	; 239
     8ca:	fe 4f       	sbci	r31, 0xFE	; 254
     8cc:	80 81       	ld	r24, Z
     8ce:	91 81       	ldd	r25, Z+1	; 0x01
     8d0:	b3 01       	movw	r22, r6
     8d2:	68 1b       	sub	r22, r24
     8d4:	79 0b       	sbc	r23, r25
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	0e 94 30 0b 	call	0x1660	; 0x1660 <__floatunsisf>
     8de:	9b 01       	movw	r18, r22
     8e0:	ac 01       	movw	r20, r24
     8e2:	0e 94 33 0a 	call	0x1466	; 0x1466 <__addsf3>
     8e6:	6b 01       	movw	r12, r22
     8e8:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     8ea:	ad 81       	ldd	r26, Y+5	; 0x05
     8ec:	be 81       	ldd	r27, Y+6	; 0x06
     8ee:	bd 01       	movw	r22, r26
     8f0:	88 27       	eor	r24, r24
     8f2:	77 fd       	sbrc	r23, 7
     8f4:	80 95       	com	r24
     8f6:	98 2f       	mov	r25, r24
     8f8:	0e 94 32 0b 	call	0x1664	; 0x1664 <__floatsisf>
     8fc:	4b 01       	movw	r8, r22
     8fe:	5c 01       	movw	r10, r24
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
     900:	b3 01       	movw	r22, r6
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	0e 94 30 0b 	call	0x1660	; 0x1660 <__floatunsisf>
     90a:	2b 01       	movw	r4, r22
     90c:	3c 01       	movw	r6, r24
     90e:	29 81       	ldd	r18, Y+1	; 0x01
     910:	3a 81       	ldd	r19, Y+2	; 0x02
     912:	4b 81       	ldd	r20, Y+3	; 0x03
     914:	5c 81       	ldd	r21, Y+4	; 0x04
     916:	c7 01       	movw	r24, r14
     918:	b6 01       	movw	r22, r12
     91a:	0e 94 be 0b 	call	0x177c	; 0x177c <__mulsf3>
     91e:	9b 01       	movw	r18, r22
     920:	ac 01       	movw	r20, r24
     922:	c3 01       	movw	r24, r6
     924:	b2 01       	movw	r22, r4
     926:	0e 94 32 0a 	call	0x1464	; 0x1464 <__subsf3>
     92a:	9b 01       	movw	r18, r22
     92c:	ac 01       	movw	r20, r24
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     92e:	c5 01       	movw	r24, r10
     930:	b4 01       	movw	r22, r8
     932:	0e 94 32 0a 	call	0x1464	; 0x1464 <__subsf3>
     936:	20 e0       	ldi	r18, 0x00	; 0
     938:	30 e0       	ldi	r19, 0x00	; 0
     93a:	40 e2       	ldi	r20, 0x20	; 32
     93c:	51 e4       	ldi	r21, 0x41	; 65
     93e:	0e 94 be 0b 	call	0x177c	; 0x177c <__mulsf3>
            b=((int)((int)b/(int)slope));
     942:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <__fixsfsi>
     946:	5b 01       	movw	r10, r22
     948:	c7 01       	movw	r24, r14
     94a:	b6 01       	movw	r22, r12
     94c:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <__fixsfsi>
     950:	ab 01       	movw	r20, r22
     952:	bc 01       	movw	r22, r24
     954:	c5 01       	movw	r24, r10
     956:	ba 01       	movw	r22, r20
     958:	0e 94 04 0a 	call	0x1408	; 0x1408 <__divmodhi4>
            dist_high=b;
     95c:	76 2e       	mov	r7, r22
     95e:	e8 c0       	rjmp	.+464    	; 0xb30 <__stack+0x231>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     960:	77 24       	eor	r7, r7
     962:	7a 94       	dec	r7
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     964:	d8 01       	movw	r26, r16
     966:	ad 90       	ld	r10, X+
     968:	bc 90       	ld	r11, X
     96a:	80 91 38 01 	lds	r24, 0x0138
     96e:	90 91 39 01 	lds	r25, 0x0139
     972:	8a 15       	cp	r24, r10
     974:	9b 05       	cpc	r25, r11
     976:	08 f4       	brcc	.+2      	; 0x97a <__stack+0x7b>
     978:	6f c0       	rjmp	.+222    	; 0xa58 <__stack+0x159>
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     97a:	00 91 3a 01 	lds	r16, 0x013A
     97e:	10 91 3b 01 	lds	r17, 0x013B
     982:	0a 15       	cp	r16, r10
     984:	1b 05       	cpc	r17, r11
     986:	08 f4       	brcc	.+2      	; 0x98a <__stack+0x8b>
     988:	5c c1       	rjmp	.+696    	; 0xc42 <__stack+0x343>
     98a:	00 91 3c 01 	lds	r16, 0x013C
     98e:	10 91 3d 01 	lds	r17, 0x013D
     992:	0a 15       	cp	r16, r10
     994:	1b 05       	cpc	r17, r11
     996:	08 f4       	brcc	.+2      	; 0x99a <__stack+0x9b>
     998:	5d c1       	rjmp	.+698    	; 0xc54 <__stack+0x355>
     99a:	00 91 3e 01 	lds	r16, 0x013E
     99e:	10 91 3f 01 	lds	r17, 0x013F
     9a2:	0a 15       	cp	r16, r10
     9a4:	1b 05       	cpc	r17, r11
     9a6:	08 f4       	brcc	.+2      	; 0x9aa <__stack+0xab>
     9a8:	5e c1       	rjmp	.+700    	; 0xc66 <__stack+0x367>
     9aa:	00 91 40 01 	lds	r16, 0x0140
     9ae:	10 91 41 01 	lds	r17, 0x0141
     9b2:	0a 15       	cp	r16, r10
     9b4:	1b 05       	cpc	r17, r11
     9b6:	08 f4       	brcc	.+2      	; 0x9ba <__stack+0xbb>
     9b8:	5f c1       	rjmp	.+702    	; 0xc78 <__stack+0x379>
     9ba:	00 91 42 01 	lds	r16, 0x0142
     9be:	10 91 43 01 	lds	r17, 0x0143
     9c2:	0a 15       	cp	r16, r10
     9c4:	1b 05       	cpc	r17, r11
     9c6:	08 f4       	brcc	.+2      	; 0x9ca <__stack+0xcb>
     9c8:	d8 c0       	rjmp	.+432    	; 0xb7a <__stack+0x27b>
     9ca:	00 91 44 01 	lds	r16, 0x0144
     9ce:	10 91 45 01 	lds	r17, 0x0145
     9d2:	0a 15       	cp	r16, r10
     9d4:	1b 05       	cpc	r17, r11
     9d6:	08 f4       	brcc	.+2      	; 0x9da <__stack+0xdb>
     9d8:	58 c1       	rjmp	.+688    	; 0xc8a <__stack+0x38b>
     9da:	00 91 46 01 	lds	r16, 0x0146
     9de:	10 91 47 01 	lds	r17, 0x0147
     9e2:	0a 15       	cp	r16, r10
     9e4:	1b 05       	cpc	r17, r11
     9e6:	08 f4       	brcc	.+2      	; 0x9ea <__stack+0xeb>
     9e8:	59 c1       	rjmp	.+690    	; 0xc9c <__stack+0x39d>
     9ea:	00 91 48 01 	lds	r16, 0x0148
     9ee:	10 91 49 01 	lds	r17, 0x0149
     9f2:	0a 15       	cp	r16, r10
     9f4:	1b 05       	cpc	r17, r11
     9f6:	08 f4       	brcc	.+2      	; 0x9fa <__stack+0xfb>
     9f8:	5a c1       	rjmp	.+692    	; 0xcae <__stack+0x3af>
     9fa:	00 91 4a 01 	lds	r16, 0x014A
     9fe:	10 91 4b 01 	lds	r17, 0x014B
     a02:	0a 15       	cp	r16, r10
     a04:	1b 05       	cpc	r17, r11
     a06:	08 f4       	brcc	.+2      	; 0xa0a <__stack+0x10b>
     a08:	5b c1       	rjmp	.+694    	; 0xcc0 <__stack+0x3c1>
     a0a:	00 91 4c 01 	lds	r16, 0x014C
     a0e:	10 91 4d 01 	lds	r17, 0x014D
     a12:	0a 15       	cp	r16, r10
     a14:	1b 05       	cpc	r17, r11
     a16:	08 f4       	brcc	.+2      	; 0xa1a <__stack+0x11b>
     a18:	5c c1       	rjmp	.+696    	; 0xcd2 <__stack+0x3d3>
     a1a:	00 91 4e 01 	lds	r16, 0x014E
     a1e:	10 91 4f 01 	lds	r17, 0x014F
     a22:	0a 15       	cp	r16, r10
     a24:	1b 05       	cpc	r17, r11
     a26:	08 f4       	brcc	.+2      	; 0xa2a <__stack+0x12b>
     a28:	59 c1       	rjmp	.+690    	; 0xcdc <__stack+0x3dd>
     a2a:	00 91 50 01 	lds	r16, 0x0150
     a2e:	10 91 51 01 	lds	r17, 0x0151
     a32:	0a 15       	cp	r16, r10
     a34:	1b 05       	cpc	r17, r11
     a36:	08 f4       	brcc	.+2      	; 0xa3a <__stack+0x13b>
     a38:	5a c1       	rjmp	.+692    	; 0xcee <__stack+0x3ef>
     a3a:	00 91 52 01 	lds	r16, 0x0152
     a3e:	10 91 53 01 	lds	r17, 0x0153
     a42:	0a 15       	cp	r16, r10
     a44:	1b 05       	cpc	r17, r11
     a46:	08 f4       	brcc	.+2      	; 0xa4a <__stack+0x14b>
     a48:	5b c1       	rjmp	.+694    	; 0xd00 <__stack+0x401>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     a4a:	1a e5       	ldi	r17, 0x5A	; 90
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     a4c:	bf ef       	ldi	r27, 0xFF	; 255
     a4e:	7b 12       	cpse	r7, r27
     a50:	07 c0       	rjmp	.+14     	; 0xa60 <__stack+0x161>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
     a52:	81 e2       	ldi	r24, 0x21	; 33
     a54:	81 0f       	add	r24, r17
     a56:	52 c0       	rjmp	.+164    	; 0xafc <__stack+0x1fd>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
     a58:	10 e0       	ldi	r17, 0x00	; 0
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     a5a:	bf ef       	ldi	r27, 0xFF	; 255
     a5c:	7b 16       	cp	r7, r27
     a5e:	c9 f3       	breq	.-14     	; 0xa52 <__stack+0x153>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     a60:	ed 81       	ldd	r30, Y+5	; 0x05
     a62:	fe 81       	ldd	r31, Y+6	; 0x06
     a64:	bf 01       	movw	r22, r30
     a66:	88 27       	eor	r24, r24
     a68:	77 fd       	sbrc	r23, 7
     a6a:	80 95       	com	r24
     a6c:	98 2f       	mov	r25, r24
     a6e:	0e 94 32 0b 	call	0x1664	; 0x1664 <__floatsisf>
     a72:	6b 01       	movw	r12, r22
     a74:	7c 01       	movw	r14, r24
     a76:	67 2d       	mov	r22, r7
     a78:	70 e0       	ldi	r23, 0x00	; 0
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	0e 94 30 0b 	call	0x1660	; 0x1660 <__floatunsisf>
     a82:	4b 01       	movw	r8, r22
     a84:	5c 01       	movw	r10, r24
     a86:	a7 01       	movw	r20, r14
     a88:	96 01       	movw	r18, r12
     a8a:	60 e0       	ldi	r22, 0x00	; 0
     a8c:	70 e0       	ldi	r23, 0x00	; 0
     a8e:	81 e6       	ldi	r24, 0x61	; 97
     a90:	94 e4       	ldi	r25, 0x44	; 68
     a92:	0e 94 32 0a 	call	0x1464	; 0x1464 <__subsf3>
     a96:	9b 01       	movw	r18, r22
     a98:	ac 01       	movw	r20, r24
     a9a:	c5 01       	movw	r24, r10
     a9c:	b4 01       	movw	r22, r8
     a9e:	0e 94 be 0b 	call	0x177c	; 0x177c <__mulsf3>
     aa2:	4b 01       	movw	r8, r22
     aa4:	5c 01       	movw	r10, r24
     aa6:	61 2f       	mov	r22, r17
     aa8:	70 e0       	ldi	r23, 0x00	; 0
     aaa:	80 e0       	ldi	r24, 0x00	; 0
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	0e 94 30 0b 	call	0x1660	; 0x1660 <__floatunsisf>
     ab2:	2b 01       	movw	r4, r22
     ab4:	3c 01       	movw	r6, r24
     ab6:	20 e0       	ldi	r18, 0x00	; 0
     ab8:	30 e0       	ldi	r19, 0x00	; 0
     aba:	4f e2       	ldi	r20, 0x2F	; 47
     abc:	54 e4       	ldi	r21, 0x44	; 68
     abe:	c7 01       	movw	r24, r14
     ac0:	b6 01       	movw	r22, r12
     ac2:	0e 94 32 0a 	call	0x1464	; 0x1464 <__subsf3>
     ac6:	9b 01       	movw	r18, r22
     ac8:	ac 01       	movw	r20, r24
     aca:	c3 01       	movw	r24, r6
     acc:	b2 01       	movw	r22, r4
     ace:	0e 94 be 0b 	call	0x177c	; 0x177c <__mulsf3>
     ad2:	9b 01       	movw	r18, r22
     ad4:	ac 01       	movw	r20, r24
     ad6:	c5 01       	movw	r24, r10
     ad8:	b4 01       	movw	r22, r8
     ada:	0e 94 33 0a 	call	0x1466	; 0x1466 <__addsf3>
     ade:	20 e0       	ldi	r18, 0x00	; 0
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	48 e4       	ldi	r20, 0x48	; 72
     ae4:	53 e4       	ldi	r21, 0x43	; 67
     ae6:	0e 94 97 0a 	call	0x152e	; 0x152e <__divsf3>
     aea:	20 e0       	ldi	r18, 0x00	; 0
     aec:	30 e0       	ldi	r19, 0x00	; 0
     aee:	44 e0       	ldi	r20, 0x04	; 4
     af0:	52 e4       	ldi	r21, 0x42	; 66
     af2:	0e 94 33 0a 	call	0x1466	; 0x1466 <__addsf3>
     af6:	0e 94 04 0b 	call	0x1608	; 0x1608 <__fixunssfsi>
     afa:	86 2f       	mov	r24, r22
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
    }
}
     afc:	26 96       	adiw	r28, 0x06	; 6
     afe:	0f b6       	in	r0, 0x3f	; 63
     b00:	f8 94       	cli
     b02:	de bf       	out	0x3e, r29	; 62
     b04:	0f be       	out	0x3f, r0	; 63
     b06:	cd bf       	out	0x3d, r28	; 61
     b08:	df 91       	pop	r29
     b0a:	cf 91       	pop	r28
     b0c:	1f 91       	pop	r17
     b0e:	0f 91       	pop	r16
     b10:	ff 90       	pop	r15
     b12:	ef 90       	pop	r14
     b14:	df 90       	pop	r13
     b16:	cf 90       	pop	r12
     b18:	bf 90       	pop	r11
     b1a:	af 90       	pop	r10
     b1c:	9f 90       	pop	r9
     b1e:	8f 90       	pop	r8
     b20:	7f 90       	pop	r7
     b22:	6f 90       	pop	r6
     b24:	5f 90       	pop	r5
     b26:	4f 90       	pop	r4
     b28:	3f 90       	pop	r3
     b2a:	2f 90       	pop	r2
     b2c:	08 95       	ret
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     b2e:	71 2c       	mov	r7, r1
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     b30:	ed 81       	ldd	r30, Y+5	; 0x05
     b32:	fe 81       	ldd	r31, Y+6	; 0x06
     b34:	ed 3b       	cpi	r30, 0xBD	; 189
     b36:	f2 40       	sbci	r31, 0x02	; 2
     b38:	0c f0       	brlt	.+2      	; 0xb3c <__stack+0x23d>
     b3a:	14 cf       	rjmp	.-472    	; 0x964 <__stack+0x65>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     b3c:	81 e2       	ldi	r24, 0x21	; 33
     b3e:	87 0d       	add	r24, r7
     b40:	dd cf       	rjmp	.-70     	; 0xafc <__stack+0x1fd>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     b42:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
     b44:	85 e0       	ldi	r24, 0x05	; 5
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	7c 01       	movw	r14, r24
     b4a:	f1 e0       	ldi	r31, 0x01	; 1
     b4c:	ef 1a       	sub	r14, r31
     b4e:	f1 08       	sbc	r15, r1
     b50:	70 e0       	ldi	r23, 0x00	; 0
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	0e 94 30 0b 	call	0x1660	; 0x1660 <__floatunsisf>
     b5a:	20 e0       	ldi	r18, 0x00	; 0
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	40 e0       	ldi	r20, 0x00	; 0
     b60:	5f e3       	ldi	r21, 0x3F	; 63
     b62:	0e 94 be 0b 	call	0x177c	; 0x177c <__mulsf3>
     b66:	20 e0       	ldi	r18, 0x00	; 0
     b68:	30 e0       	ldi	r19, 0x00	; 0
     b6a:	a9 01       	movw	r20, r18
     b6c:	0e 94 33 0a 	call	0x1466	; 0x1466 <__addsf3>
     b70:	69 83       	std	Y+1, r22	; 0x01
     b72:	7a 83       	std	Y+2, r23	; 0x02
     b74:	8b 83       	std	Y+3, r24	; 0x03
     b76:	9c 83       	std	Y+4, r25	; 0x04
     b78:	a4 ce       	rjmp	.-696    	; 0x8c2 <estimate_distance+0x13e>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     b7a:	f5 e0       	ldi	r31, 0x05	; 5
     b7c:	6f 2e       	mov	r6, r31
                if(dist->low_gain > kilo_irlow[i]) {
     b7e:	e5 e0       	ldi	r30, 0x05	; 5
     b80:	f0 e0       	ldi	r31, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     b82:	ee 0f       	add	r30, r30
     b84:	ff 1f       	adc	r31, r31
     b86:	ea 5c       	subi	r30, 0xCA	; 202
     b88:	fe 4f       	sbci	r31, 0xFE	; 254
     b8a:	80 81       	ld	r24, Z
     b8c:	91 81       	ldd	r25, Z+1	; 0x01
     b8e:	b8 01       	movw	r22, r16
     b90:	68 1b       	sub	r22, r24
     b92:	79 0b       	sbc	r23, r25
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	0e 94 30 0b 	call	0x1660	; 0x1660 <__floatunsisf>
     b9c:	9b 01       	movw	r18, r22
     b9e:	ac 01       	movw	r20, r24
     ba0:	0e 94 33 0a 	call	0x1466	; 0x1466 <__addsf3>
     ba4:	6b 01       	movw	r12, r22
     ba6:	7c 01       	movw	r14, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     ba8:	b5 01       	movw	r22, r10
     baa:	88 27       	eor	r24, r24
     bac:	77 fd       	sbrc	r23, 7
     bae:	80 95       	com	r24
     bb0:	98 2f       	mov	r25, r24
     bb2:	0e 94 32 0b 	call	0x1664	; 0x1664 <__floatsisf>
     bb6:	4b 01       	movw	r8, r22
     bb8:	5c 01       	movw	r10, r24

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
     bba:	b8 01       	movw	r22, r16
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	0e 94 30 0b 	call	0x1660	; 0x1660 <__floatunsisf>
     bc4:	1b 01       	movw	r2, r22
     bc6:	2c 01       	movw	r4, r24
     bc8:	66 2d       	mov	r22, r6
     bca:	70 e0       	ldi	r23, 0x00	; 0
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	0e 94 30 0b 	call	0x1660	; 0x1660 <__floatunsisf>
     bd4:	20 e0       	ldi	r18, 0x00	; 0
     bd6:	30 e0       	ldi	r19, 0x00	; 0
     bd8:	40 e0       	ldi	r20, 0x00	; 0
     bda:	5f e3       	ldi	r21, 0x3F	; 63
     bdc:	0e 94 be 0b 	call	0x177c	; 0x177c <__mulsf3>
     be0:	20 e0       	ldi	r18, 0x00	; 0
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	a9 01       	movw	r20, r18
     be6:	0e 94 33 0a 	call	0x1466	; 0x1466 <__addsf3>
     bea:	a7 01       	movw	r20, r14
     bec:	96 01       	movw	r18, r12
     bee:	0e 94 be 0b 	call	0x177c	; 0x177c <__mulsf3>
     bf2:	9b 01       	movw	r18, r22
     bf4:	ac 01       	movw	r20, r24
     bf6:	c2 01       	movw	r24, r4
     bf8:	b1 01       	movw	r22, r2
     bfa:	0e 94 32 0a 	call	0x1464	; 0x1464 <__subsf3>
     bfe:	9b 01       	movw	r18, r22
     c00:	ac 01       	movw	r20, r24
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     c02:	c5 01       	movw	r24, r10
     c04:	b4 01       	movw	r22, r8
     c06:	0e 94 32 0a 	call	0x1464	; 0x1464 <__subsf3>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e2       	ldi	r20, 0x20	; 32
     c10:	51 e4       	ldi	r21, 0x41	; 65
     c12:	0e 94 be 0b 	call	0x177c	; 0x177c <__mulsf3>
                b=((int)((int)b/(int)slope));
     c16:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <__fixsfsi>
     c1a:	8b 01       	movw	r16, r22
     c1c:	c7 01       	movw	r24, r14
     c1e:	b6 01       	movw	r22, r12
     c20:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <__fixsfsi>
     c24:	ab 01       	movw	r20, r22
     c26:	bc 01       	movw	r22, r24
     c28:	c8 01       	movw	r24, r16
     c2a:	ba 01       	movw	r22, r20
     c2c:	0e 94 04 0a 	call	0x1408	; 0x1408 <__divmodhi4>
                dist_low=b;
     c30:	16 2f       	mov	r17, r22
            }
        }
    }

    if (dist_low != 255) {
     c32:	6f 3f       	cpi	r22, 0xFF	; 255
     c34:	09 f0       	breq	.+2      	; 0xc38 <__stack+0x339>
     c36:	11 cf       	rjmp	.-478    	; 0xa5a <__stack+0x15b>
     c38:	81 cf       	rjmp	.-254    	; 0xb3c <__stack+0x23d>
    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     c3a:	61 e0       	ldi	r22, 0x01	; 1
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	83 cf       	rjmp	.-250    	; 0xb48 <__stack+0x249>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     c42:	66 24       	eor	r6, r6
     c44:	63 94       	inc	r6
     c46:	e1 e0       	ldi	r30, 0x01	; 1
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	9b cf       	rjmp	.-202    	; 0xb82 <__stack+0x283>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     c4c:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
     c4e:	82 e0       	ldi	r24, 0x02	; 2
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	7a cf       	rjmp	.-268    	; 0xb48 <__stack+0x249>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     c54:	82 e0       	ldi	r24, 0x02	; 2
     c56:	68 2e       	mov	r6, r24
                if(dist->low_gain > kilo_irlow[i]) {
     c58:	e2 e0       	ldi	r30, 0x02	; 2
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	92 cf       	rjmp	.-220    	; 0xb82 <__stack+0x283>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     c5e:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
     c60:	83 e0       	ldi	r24, 0x03	; 3
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	71 cf       	rjmp	.-286    	; 0xb48 <__stack+0x249>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     c66:	b3 e0       	ldi	r27, 0x03	; 3
     c68:	6b 2e       	mov	r6, r27
                if(dist->low_gain > kilo_irlow[i]) {
     c6a:	e3 e0       	ldi	r30, 0x03	; 3
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	89 cf       	rjmp	.-238    	; 0xb82 <__stack+0x283>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     c70:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
     c72:	84 e0       	ldi	r24, 0x04	; 4
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	68 cf       	rjmp	.-304    	; 0xb48 <__stack+0x249>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     c78:	a4 e0       	ldi	r26, 0x04	; 4
     c7a:	6a 2e       	mov	r6, r26
                if(dist->low_gain > kilo_irlow[i]) {
     c7c:	e4 e0       	ldi	r30, 0x04	; 4
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	80 cf       	rjmp	.-256    	; 0xb82 <__stack+0x283>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     c82:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
     c84:	86 e0       	ldi	r24, 0x06	; 6
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	5f cf       	rjmp	.-322    	; 0xb48 <__stack+0x249>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     c8a:	e6 e0       	ldi	r30, 0x06	; 6
     c8c:	6e 2e       	mov	r6, r30
                if(dist->low_gain > kilo_irlow[i]) {
     c8e:	e6 e0       	ldi	r30, 0x06	; 6
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	77 cf       	rjmp	.-274    	; 0xb82 <__stack+0x283>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     c94:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
     c96:	87 e0       	ldi	r24, 0x07	; 7
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	56 cf       	rjmp	.-340    	; 0xb48 <__stack+0x249>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     c9c:	77 e0       	ldi	r23, 0x07	; 7
     c9e:	67 2e       	mov	r6, r23
                if(dist->low_gain > kilo_irlow[i]) {
     ca0:	e7 e0       	ldi	r30, 0x07	; 7
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	6e cf       	rjmp	.-292    	; 0xb82 <__stack+0x283>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     ca6:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
     ca8:	88 e0       	ldi	r24, 0x08	; 8
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	4d cf       	rjmp	.-358    	; 0xb48 <__stack+0x249>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cae:	68 e0       	ldi	r22, 0x08	; 8
     cb0:	66 2e       	mov	r6, r22
                if(dist->low_gain > kilo_irlow[i]) {
     cb2:	e8 e0       	ldi	r30, 0x08	; 8
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	65 cf       	rjmp	.-310    	; 0xb82 <__stack+0x283>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cb8:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
     cba:	89 e0       	ldi	r24, 0x09	; 9
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	44 cf       	rjmp	.-376    	; 0xb48 <__stack+0x249>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cc0:	59 e0       	ldi	r21, 0x09	; 9
     cc2:	65 2e       	mov	r6, r21
                if(dist->low_gain > kilo_irlow[i]) {
     cc4:	e9 e0       	ldi	r30, 0x09	; 9
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	5c cf       	rjmp	.-328    	; 0xb82 <__stack+0x283>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cca:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
     ccc:	8a e0       	ldi	r24, 0x0A	; 10
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	3b cf       	rjmp	.-394    	; 0xb48 <__stack+0x249>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cd2:	4a e0       	ldi	r20, 0x0A	; 10
     cd4:	64 2e       	mov	r6, r20
                if(dist->low_gain > kilo_irlow[i]) {
     cd6:	ea e0       	ldi	r30, 0x0A	; 10
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	53 cf       	rjmp	.-346    	; 0xb82 <__stack+0x283>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cdc:	3b e0       	ldi	r19, 0x0B	; 11
     cde:	63 2e       	mov	r6, r19
                if(dist->low_gain > kilo_irlow[i]) {
     ce0:	eb e0       	ldi	r30, 0x0B	; 11
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	4e cf       	rjmp	.-356    	; 0xb82 <__stack+0x283>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     ce6:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
     ce8:	8b e0       	ldi	r24, 0x0B	; 11
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	2d cf       	rjmp	.-422    	; 0xb48 <__stack+0x249>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cee:	2c e0       	ldi	r18, 0x0C	; 12
     cf0:	62 2e       	mov	r6, r18
                if(dist->low_gain > kilo_irlow[i]) {
     cf2:	ec e0       	ldi	r30, 0x0C	; 12
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	45 cf       	rjmp	.-374    	; 0xb82 <__stack+0x283>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cf8:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
     cfa:	8c e0       	ldi	r24, 0x0C	; 12
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	24 cf       	rjmp	.-440    	; 0xb48 <__stack+0x249>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d00:	9d e0       	ldi	r25, 0x0D	; 13
     d02:	69 2e       	mov	r6, r25
                if(dist->low_gain > kilo_irlow[i]) {
     d04:	ed e0       	ldi	r30, 0x0D	; 13
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	3c cf       	rjmp	.-392    	; 0xb82 <__stack+0x283>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d0a:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
     d0c:	8d e0       	ldi	r24, 0x0D	; 13
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	1b cf       	rjmp	.-458    	; 0xb48 <__stack+0x249>

00000d12 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     d12:	1f 92       	push	r1
     d14:	0f 92       	push	r0
     d16:	0f b6       	in	r0, 0x3f	; 63
     d18:	0f 92       	push	r0
     d1a:	11 24       	eor	r1, r1
     d1c:	2f 93       	push	r18
     d1e:	3f 93       	push	r19
     d20:	4f 93       	push	r20
     d22:	5f 93       	push	r21
     d24:	6f 93       	push	r22
     d26:	7f 93       	push	r23
     d28:	8f 93       	push	r24
     d2a:	9f 93       	push	r25
     d2c:	af 93       	push	r26
     d2e:	bf 93       	push	r27
     d30:	ef 93       	push	r30
     d32:	ff 93       	push	r31
    tx_clock += tx_increment;
     d34:	80 91 57 01 	lds	r24, 0x0157
     d38:	90 91 58 01 	lds	r25, 0x0158
     d3c:	20 91 55 01 	lds	r18, 0x0155
     d40:	30 91 56 01 	lds	r19, 0x0156
     d44:	82 0f       	add	r24, r18
     d46:	93 1f       	adc	r25, r19
     d48:	90 93 58 01 	sts	0x0158, r25
     d4c:	80 93 57 01 	sts	0x0157, r24
    tx_increment = 0xFF;
     d50:	8f ef       	ldi	r24, 0xFF	; 255
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	90 93 56 01 	sts	0x0156, r25
     d58:	80 93 55 01 	sts	0x0155, r24
    OCR0A = tx_increment;
     d5c:	8f ef       	ldi	r24, 0xFF	; 255
     d5e:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     d60:	80 91 33 01 	lds	r24, 0x0133
     d64:	90 91 34 01 	lds	r25, 0x0134
     d68:	a0 91 35 01 	lds	r26, 0x0135
     d6c:	b0 91 36 01 	lds	r27, 0x0136
     d70:	01 96       	adiw	r24, 0x01	; 1
     d72:	a1 1d       	adc	r26, r1
     d74:	b1 1d       	adc	r27, r1
     d76:	80 93 33 01 	sts	0x0133, r24
     d7a:	90 93 34 01 	sts	0x0134, r25
     d7e:	a0 93 35 01 	sts	0x0135, r26
     d82:	b0 93 36 01 	sts	0x0136, r27

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     d86:	80 91 37 01 	lds	r24, 0x0137
     d8a:	81 11       	cpse	r24, r1
     d8c:	0f c0       	rjmp	.+30     	; 0xdac <__vector_14+0x9a>
     d8e:	80 91 66 01 	lds	r24, 0x0166
     d92:	90 91 67 01 	lds	r25, 0x0167
     d96:	20 91 57 01 	lds	r18, 0x0157
     d9a:	30 91 58 01 	lds	r19, 0x0158
     d9e:	82 17       	cp	r24, r18
     da0:	93 07       	cpc	r25, r19
     da2:	20 f4       	brcc	.+8      	; 0xdac <__vector_14+0x9a>
     da4:	80 91 0f 01 	lds	r24, 0x010F
     da8:	84 30       	cpi	r24, 0x04	; 4
     daa:	89 f0       	breq	.+34     	; 0xdce <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
     dac:	ff 91       	pop	r31
     dae:	ef 91       	pop	r30
     db0:	bf 91       	pop	r27
     db2:	af 91       	pop	r26
     db4:	9f 91       	pop	r25
     db6:	8f 91       	pop	r24
     db8:	7f 91       	pop	r23
     dba:	6f 91       	pop	r22
     dbc:	5f 91       	pop	r21
     dbe:	4f 91       	pop	r20
     dc0:	3f 91       	pop	r19
     dc2:	2f 91       	pop	r18
     dc4:	0f 90       	pop	r0
     dc6:	0f be       	out	0x3f, r0	; 63
     dc8:	0f 90       	pop	r0
     dca:	1f 90       	pop	r1
     dcc:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
     dce:	e0 91 03 01 	lds	r30, 0x0103
     dd2:	f0 91 04 01 	lds	r31, 0x0104
     dd6:	09 95       	icall
        if (msg) {
     dd8:	00 97       	sbiw	r24, 0x00	; 0
     dda:	41 f3       	breq	.-48     	; 0xdac <__vector_14+0x9a>
            if (message_send(msg)) {
     ddc:	0e 94 67 09 	call	0x12ce	; 0x12ce <message_send>
     de0:	81 11       	cpse	r24, r1
     de2:	09 c0       	rjmp	.+18     	; 0xdf6 <__vector_14+0xe4>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
     de4:	0e 94 6f 0c 	call	0x18de	; 0x18de <rand>
     de8:	99 27       	eor	r25, r25
     dea:	90 93 56 01 	sts	0x0156, r25
     dee:	80 93 55 01 	sts	0x0155, r24
                OCR0A = tx_increment;
     df2:	87 bd       	out	0x27, r24	; 39
     df4:	db cf       	rjmp	.-74     	; 0xdac <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
     df6:	e0 91 01 01 	lds	r30, 0x0101
     dfa:	f0 91 02 01 	lds	r31, 0x0102
     dfe:	09 95       	icall
                tx_clock = 0;
     e00:	10 92 58 01 	sts	0x0158, r1
     e04:	10 92 57 01 	sts	0x0157, r1
     e08:	d1 cf       	rjmp	.-94     	; 0xdac <__vector_14+0x9a>

00000e0a <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     e0a:	80 ff       	sbrs	r24, 0
     e0c:	11 c0       	rjmp	.+34     	; 0xe30 <set_color+0x26>
        DDRD |= (1<<5);
     e0e:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
     e10:	81 ff       	sbrs	r24, 1
     e12:	11 c0       	rjmp	.+34     	; 0xe36 <set_color+0x2c>
        DDRD |= (1<<4);
     e14:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
     e16:	82 ff       	sbrs	r24, 2
     e18:	11 c0       	rjmp	.+34     	; 0xe3c <set_color+0x32>
        DDRC |= (1<<3);
     e1a:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
     e1c:	83 ff       	sbrs	r24, 3
     e1e:	11 c0       	rjmp	.+34     	; 0xe42 <set_color+0x38>
        DDRC |= (1<<2);
     e20:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
     e22:	84 ff       	sbrs	r24, 4
     e24:	11 c0       	rjmp	.+34     	; 0xe48 <set_color+0x3e>
        DDRC |= (1<<5);
     e26:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
     e28:	85 fd       	sbrc	r24, 5
     e2a:	11 c0       	rjmp	.+34     	; 0xe4e <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     e2c:	3c 98       	cbi	0x07, 4	; 7
     e2e:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     e30:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     e32:	81 fd       	sbrc	r24, 1
     e34:	ef cf       	rjmp	.-34     	; 0xe14 <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     e36:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     e38:	82 fd       	sbrc	r24, 2
     e3a:	ef cf       	rjmp	.-34     	; 0xe1a <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     e3c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     e3e:	83 fd       	sbrc	r24, 3
     e40:	ef cf       	rjmp	.-34     	; 0xe20 <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     e42:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     e44:	84 fd       	sbrc	r24, 4
     e46:	ef cf       	rjmp	.-34     	; 0xe26 <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     e48:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     e4a:	85 ff       	sbrs	r24, 5
     e4c:	ef cf       	rjmp	.-34     	; 0xe2c <set_color+0x22>
        DDRC |= (1<<4);
     e4e:	3c 9a       	sbi	0x07, 4	; 7
     e50:	08 95       	ret

00000e52 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     e52:	1f 92       	push	r1
     e54:	0f 92       	push	r0
     e56:	0f b6       	in	r0, 0x3f	; 63
     e58:	0f 92       	push	r0
     e5a:	11 24       	eor	r1, r1
     e5c:	8f 93       	push	r24
     e5e:	9f 93       	push	r25
    rx_timer_off();
     e60:	10 92 81 00 	sts	0x0081, r1
     e64:	10 92 85 00 	sts	0x0085, r1
     e68:	10 92 84 00 	sts	0x0084, r1
    rx_leadingbit = 1;
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	80 93 10 01 	sts	0x0110, r24
    rx_leadingbyte = 1;
     e72:	80 93 54 01 	sts	0x0154, r24
    rx_busy = 0;
     e76:	10 92 37 01 	sts	0x0137, r1
    adc_trigger_high_gain();
     e7a:	10 92 7c 00 	sts	0x007C, r1
     e7e:	93 ea       	ldi	r25, 0xA3	; 163
     e80:	90 93 7a 00 	sts	0x007A, r25
     e84:	80 93 7b 00 	sts	0x007B, r24
}
     e88:	9f 91       	pop	r25
     e8a:	8f 91       	pop	r24
     e8c:	0f 90       	pop	r0
     e8e:	0f be       	out	0x3f, r0	; 63
     e90:	0f 90       	pop	r0
     e92:	1f 90       	pop	r1
     e94:	18 95       	reti

00000e96 <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     e96:	1f 92       	push	r1
     e98:	0f 92       	push	r0
     e9a:	0f b6       	in	r0, 0x3f	; 63
     e9c:	0f 92       	push	r0
     e9e:	11 24       	eor	r1, r1
     ea0:	2f 93       	push	r18
     ea2:	3f 93       	push	r19
     ea4:	4f 93       	push	r20
     ea6:	5f 93       	push	r21
     ea8:	6f 93       	push	r22
     eaa:	7f 93       	push	r23
     eac:	8f 93       	push	r24
     eae:	9f 93       	push	r25
     eb0:	af 93       	push	r26
     eb2:	bf 93       	push	r27
     eb4:	cf 93       	push	r28
     eb6:	df 93       	push	r29
     eb8:	ef 93       	push	r30
     eba:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     ebc:	20 91 84 00 	lds	r18, 0x0084
     ec0:	30 91 85 00 	lds	r19, 0x0085

    rx_busy = 1;
     ec4:	41 e0       	ldi	r20, 0x01	; 1
     ec6:	40 93 37 01 	sts	0x0137, r20
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     eca:	80 91 10 01 	lds	r24, 0x0110
     ece:	88 23       	and	r24, r24
     ed0:	a9 f1       	breq	.+106    	; 0xf3c <__vector_23+0xa6>
        rx_timer_on();
     ed2:	10 92 85 00 	sts	0x0085, r1
     ed6:	10 92 84 00 	sts	0x0084, r1
     eda:	40 93 81 00 	sts	0x0081, r20
        rx_bytevalue = 0;
     ede:	10 92 68 01 	sts	0x0168, r1
        rx_leadingbit = 0;
     ee2:	10 92 10 01 	sts	0x0110, r1
        if (rx_leadingbyte) {
     ee6:	80 91 54 01 	lds	r24, 0x0154
     eea:	88 23       	and	r24, r24
     eec:	a1 f0       	breq	.+40     	; 0xf16 <__vector_23+0x80>
            adc_finish_conversion();
     eee:	80 91 7a 00 	lds	r24, 0x007A
     ef2:	86 fd       	sbrc	r24, 6
     ef4:	fc cf       	rjmp	.-8      	; 0xeee <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
     ef6:	80 91 78 00 	lds	r24, 0x0078
     efa:	90 91 79 00 	lds	r25, 0x0079
     efe:	90 93 32 01 	sts	0x0132, r25
     f02:	80 93 31 01 	sts	0x0131, r24
            adc_trigger_low_gain();
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	80 93 7c 00 	sts	0x007C, r24
     f0c:	93 ea       	ldi	r25, 0xA3	; 163
     f0e:	90 93 7a 00 	sts	0x007A, r25
     f12:	80 93 7b 00 	sts	0x007B, r24
                    }
                }
            }
        }
    }
}
     f16:	ff 91       	pop	r31
     f18:	ef 91       	pop	r30
     f1a:	df 91       	pop	r29
     f1c:	cf 91       	pop	r28
     f1e:	bf 91       	pop	r27
     f20:	af 91       	pop	r26
     f22:	9f 91       	pop	r25
     f24:	8f 91       	pop	r24
     f26:	7f 91       	pop	r23
     f28:	6f 91       	pop	r22
     f2a:	5f 91       	pop	r21
     f2c:	4f 91       	pop	r20
     f2e:	3f 91       	pop	r19
     f30:	2f 91       	pop	r18
     f32:	0f 90       	pop	r0
     f34:	0f be       	out	0x3f, r0	; 63
     f36:	0f 90       	pop	r0
     f38:	1f 90       	pop	r1
     f3a:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
     f3c:	c9 01       	movw	r24, r18
     f3e:	87 58       	subi	r24, 0x87	; 135
     f40:	91 09       	sbc	r25, r1
     f42:	84 37       	cpi	r24, 0x74	; 116
     f44:	99 40       	sbci	r25, 0x09	; 9
     f46:	08 f0       	brcs	.+2      	; 0xf4a <__vector_23+0xb4>
     f48:	4f c0       	rjmp	.+158    	; 0xfe8 <__vector_23+0x152>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
     f4a:	26 58       	subi	r18, 0x86	; 134
     f4c:	31 09       	sbc	r19, r1
     f4e:	a4 ef       	ldi	r26, 0xF4	; 244
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	0e 94 f5 09 	call	0x13ea	; 0x13ea <__umulhisi3>
     f56:	aa 27       	eor	r26, r26
     f58:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
     f5a:	88 30       	cpi	r24, 0x08	; 8
     f5c:	08 f4       	brcc	.+2      	; 0xf60 <__vector_23+0xca>
     f5e:	7b c0       	rjmp	.+246    	; 0x1056 <__vector_23+0x1c0>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
     f60:	40 93 10 01 	sts	0x0110, r20
                if (rx_leadingbyte) {
     f64:	80 91 54 01 	lds	r24, 0x0154
     f68:	81 11       	cpse	r24, r1
     f6a:	52 c0       	rjmp	.+164    	; 0x1010 <__vector_23+0x17a>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
     f6c:	80 91 2e 01 	lds	r24, 0x012E
     f70:	e8 2f       	mov	r30, r24
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	e6 5a       	subi	r30, 0xA6	; 166
     f76:	fe 4f       	sbci	r31, 0xFE	; 254
     f78:	90 91 68 01 	lds	r25, 0x0168
     f7c:	90 83       	st	Z, r25
                    rx_byteindex++;
     f7e:	8f 5f       	subi	r24, 0xFF	; 255
     f80:	80 93 2e 01 	sts	0x012E, r24
                    if (rx_byteindex == sizeof(message_t)) {
     f84:	8c 30       	cpi	r24, 0x0C	; 12
     f86:	39 f6       	brne	.-114    	; 0xf16 <__vector_23+0x80>
                        rx_timer_off();
     f88:	10 92 81 00 	sts	0x0081, r1
     f8c:	10 92 85 00 	sts	0x0085, r1
     f90:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
     f94:	40 93 54 01 	sts	0x0154, r20
                        rx_busy = 0;
     f98:	10 92 37 01 	sts	0x0137, r1

                        if (rx_msg.crc == message_crc(&rx_msg))
     f9c:	c0 91 64 01 	lds	r28, 0x0164
     fa0:	d0 91 65 01 	lds	r29, 0x0165
     fa4:	8a e5       	ldi	r24, 0x5A	; 90
     fa6:	91 e0       	ldi	r25, 0x01	; 1
     fa8:	0e 94 4e 09 	call	0x129c	; 0x129c <message_crc>
     fac:	c8 17       	cp	r28, r24
     fae:	d9 07       	cpc	r29, r25
     fb0:	09 f0       	breq	.+2      	; 0xfb4 <__vector_23+0x11e>
     fb2:	b1 cf       	rjmp	.-158    	; 0xf16 <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
     fb4:	80 91 63 01 	lds	r24, 0x0163
     fb8:	87 ff       	sbrs	r24, 7
     fba:	5e c0       	rjmp	.+188    	; 0x1078 <__vector_23+0x1e2>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
     fbc:	98 e7       	ldi	r25, 0x78	; 120
     fbe:	98 0f       	add	r25, r24
     fc0:	93 30       	cpi	r25, 0x03	; 3
     fc2:	30 f0       	brcs	.+12     	; 0xfd0 <__vector_23+0x13a>
        motors_off();
     fc4:	53 98       	cbi	0x0a, 3	; 10
     fc6:	23 98       	cbi	0x04, 3	; 4
     fc8:	10 92 b4 00 	sts	0x00B4, r1
     fcc:	10 92 b3 00 	sts	0x00B3, r1
    switch (rx_msg.type) {
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	fc 01       	movw	r30, r24
     fd4:	e0 58       	subi	r30, 0x80	; 128
     fd6:	f1 09       	sbc	r31, r1
     fd8:	eb 30       	cpi	r30, 0x0B	; 11
     fda:	f1 05       	cpc	r31, r1
     fdc:	08 f0       	brcs	.+2      	; 0xfe0 <__vector_23+0x14a>
     fde:	9b cf       	rjmp	.-202    	; 0xf16 <__vector_23+0x80>
     fe0:	e5 5c       	subi	r30, 0xC5	; 197
     fe2:	ff 4f       	sbci	r31, 0xFF	; 255
     fe4:	0c 94 18 0a 	jmp	0x1430	; 0x1430 <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
     fe8:	10 92 81 00 	sts	0x0081, r1
     fec:	10 92 85 00 	sts	0x0085, r1
     ff0:	10 92 84 00 	sts	0x0084, r1
            rx_leadingbit = 1;
     ff4:	40 93 10 01 	sts	0x0110, r20
            rx_leadingbyte = 1;
     ff8:	40 93 54 01 	sts	0x0154, r20
            rx_busy = 0;
     ffc:	10 92 37 01 	sts	0x0137, r1
            adc_trigger_high_gain();
    1000:	10 92 7c 00 	sts	0x007C, r1
    1004:	83 ea       	ldi	r24, 0xA3	; 163
    1006:	80 93 7a 00 	sts	0x007A, r24
    100a:	40 93 7b 00 	sts	0x007B, r20
    100e:	83 cf       	rjmp	.-250    	; 0xf16 <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    1010:	80 91 7a 00 	lds	r24, 0x007A
    1014:	86 fd       	sbrc	r24, 6
    1016:	fc cf       	rjmp	.-8      	; 0x1010 <__vector_23+0x17a>
                    rx_dist.low_gain = ADCW;
    1018:	80 91 78 00 	lds	r24, 0x0078
    101c:	90 91 79 00 	lds	r25, 0x0079
    1020:	90 93 30 01 	sts	0x0130, r25
    1024:	80 93 2f 01 	sts	0x012F, r24
                    adc_trigger_high_gain();
    1028:	10 92 7c 00 	sts	0x007C, r1
    102c:	83 ea       	ldi	r24, 0xA3	; 163
    102e:	80 93 7a 00 	sts	0x007A, r24
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	80 93 7b 00 	sts	0x007B, r24
                    if (rx_bytevalue != 0) { // Collision detected.
    1038:	90 91 68 01 	lds	r25, 0x0168
    103c:	99 23       	and	r25, r25
    103e:	b9 f0       	breq	.+46     	; 0x106e <__vector_23+0x1d8>
                        rx_timer_off();
    1040:	10 92 81 00 	sts	0x0081, r1
    1044:	10 92 85 00 	sts	0x0085, r1
    1048:	10 92 84 00 	sts	0x0084, r1
                        rx_leadingbyte = 1;
    104c:	80 93 54 01 	sts	0x0154, r24
                        rx_busy = 0;
    1050:	10 92 37 01 	sts	0x0137, r1
    1054:	60 cf       	rjmp	.-320    	; 0xf16 <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    1056:	21 e0       	ldi	r18, 0x01	; 1
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	01 c0       	rjmp	.+2      	; 0x105e <__vector_23+0x1c8>
    105c:	22 0f       	add	r18, r18
    105e:	8a 95       	dec	r24
    1060:	ea f7       	brpl	.-6      	; 0x105c <__vector_23+0x1c6>
    1062:	80 91 68 01 	lds	r24, 0x0168
    1066:	82 2b       	or	r24, r18
    1068:	80 93 68 01 	sts	0x0168, r24
    106c:	54 cf       	rjmp	.-344    	; 0xf16 <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    106e:	10 92 54 01 	sts	0x0154, r1
                        rx_byteindex = 0;
    1072:	10 92 2e 01 	sts	0x012E, r1
    1076:	4f cf       	rjmp	.-354    	; 0xf16 <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    1078:	e0 91 05 01 	lds	r30, 0x0105
    107c:	f0 91 06 01 	lds	r31, 0x0106
    1080:	6f e2       	ldi	r22, 0x2F	; 47
    1082:	71 e0       	ldi	r23, 0x01	; 1
    1084:	8a e5       	ldi	r24, 0x5A	; 90
    1086:	91 e0       	ldi	r25, 0x01	; 1
    1088:	09 95       	icall
    108a:	45 cf       	rjmp	.-374    	; 0xf16 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    108c:	80 91 5a 01 	lds	r24, 0x015A
    1090:	82 30       	cpi	r24, 0x02	; 2
    1092:	09 f4       	brne	.+2      	; 0x1096 <__vector_23+0x200>
    1094:	dc c0       	rjmp	.+440    	; 0x124e <__vector_23+0x3b8>
    1096:	08 f4       	brcc	.+2      	; 0x109a <__vector_23+0x204>
    1098:	b9 c0       	rjmp	.+370    	; 0x120c <__vector_23+0x376>
    109a:	83 30       	cpi	r24, 0x03	; 3
    109c:	09 f4       	brne	.+2      	; 0x10a0 <__vector_23+0x20a>
    109e:	c5 c0       	rjmp	.+394    	; 0x122a <__vector_23+0x394>
    10a0:	84 30       	cpi	r24, 0x04	; 4
    10a2:	09 f0       	breq	.+2      	; 0x10a6 <__vector_23+0x210>
    10a4:	b0 c0       	rjmp	.+352    	; 0x1206 <__vector_23+0x370>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    10a6:	80 91 0d 01 	lds	r24, 0x010D
    10aa:	90 91 60 01 	lds	r25, 0x0160
    10ae:	83 30       	cpi	r24, 0x03	; 3
    10b0:	09 f4       	brne	.+2      	; 0x10b4 <__vector_23+0x21e>
    10b2:	e2 c0       	rjmp	.+452    	; 0x1278 <__vector_23+0x3e2>
    10b4:	80 91 5f 01 	lds	r24, 0x015F
                        prev_motion = MOVE_STOP;
    10b8:	10 92 0e 01 	sts	0x010E, r1
                        cur_motion = MOVE_STRAIGHT;
    10bc:	23 e0       	ldi	r18, 0x03	; 3
    10be:	20 93 0d 01 	sts	0x010D, r18
                        kilo_straight_left = calibmsg->straight_left;
    10c2:	80 93 6b 01 	sts	0x016B, r24
                        kilo_straight_right = calibmsg->straight_right;
    10c6:	90 93 6c 01 	sts	0x016C, r25
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    10ca:	80 91 0f 01 	lds	r24, 0x010F
    10ce:	86 30       	cpi	r24, 0x06	; 6
    10d0:	09 f4       	brne	.+2      	; 0x10d4 <__vector_23+0x23e>
    10d2:	21 cf       	rjmp	.-446    	; 0xf16 <__vector_23+0x80>
                motors_on();
    10d4:	53 9a       	sbi	0x0a, 3	; 10
    10d6:	23 9a       	sbi	0x04, 3	; 4
    10d8:	10 92 b4 00 	sts	0x00B4, r1
    10dc:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = MOVING;
    10e0:	86 e0       	ldi	r24, 0x06	; 6
    10e2:	80 93 0f 01 	sts	0x010F, r24
    10e6:	17 cf       	rjmp	.-466    	; 0xf16 <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    10e8:	80 91 0f 01 	lds	r24, 0x010F
    10ec:	86 30       	cpi	r24, 0x06	; 6
    10ee:	99 f0       	breq	.+38     	; 0x1116 <__vector_23+0x280>
                motors_on();
    10f0:	53 9a       	sbi	0x0a, 3	; 10
    10f2:	23 9a       	sbi	0x04, 3	; 4
    10f4:	10 92 b4 00 	sts	0x00B4, r1
    10f8:	10 92 b3 00 	sts	0x00B3, r1

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    10fc:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    10fe:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    1100:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    1102:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1104:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    1106:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    1108:	10 92 0d 01 	sts	0x010D, r1
    110c:	10 92 0e 01 	sts	0x010E, r1
                kilo_state = MOVING;
    1110:	86 e0       	ldi	r24, 0x06	; 6
    1112:	80 93 0f 01 	sts	0x010F, r24
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	00 90 5a 01 	lds	r0, 0x015A
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <__vector_23+0x28e>
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	0a 94       	dec	r0
    1126:	e2 f7       	brpl	.-8      	; 0x1120 <__vector_23+0x28a>
    1128:	20 91 69 01 	lds	r18, 0x0169
    112c:	30 91 6a 01 	lds	r19, 0x016A
    1130:	82 23       	and	r24, r18
    1132:	93 23       	and	r25, r19
    1134:	89 2b       	or	r24, r25
    1136:	09 f0       	breq	.+2      	; 0x113a <__vector_23+0x2a4>
    1138:	86 c0       	rjmp	.+268    	; 0x1246 <__vector_23+0x3b0>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    113a:	10 92 0d 01 	sts	0x010D, r1
    113e:	eb ce       	rjmp	.-554    	; 0xf16 <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	80 93 0f 01 	sts	0x010F, r24
    1146:	e7 ce       	rjmp	.-562    	; 0xf16 <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    1148:	e0 e0       	ldi	r30, 0x00	; 0
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    114e:	80 91 6e 00 	lds	r24, 0x006E
    1152:	8d 7f       	andi	r24, 0xFD	; 253
    1154:	80 93 6e 00 	sts	0x006E, r24
    1158:	16 bc       	out	0x26, r1	; 38
            bootload();
    115a:	e0 e0       	ldi	r30, 0x00	; 0
    115c:	f0 e7       	ldi	r31, 0x70	; 112
    115e:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    1160:	10 92 0f 01 	sts	0x010F, r1
    1164:	d8 ce       	rjmp	.-592    	; 0xf16 <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    1166:	82 e0       	ldi	r24, 0x02	; 2
    1168:	80 93 0f 01 	sts	0x010F, r24
    116c:	d4 ce       	rjmp	.-600    	; 0xf16 <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    116e:	85 e0       	ldi	r24, 0x05	; 5
    1170:	80 93 0f 01 	sts	0x010F, r24
    1174:	d0 ce       	rjmp	.-608    	; 0xf16 <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    1176:	80 91 0f 01 	lds	r24, 0x010F
    117a:	83 30       	cpi	r24, 0x03	; 3
    117c:	09 f4       	brne	.+2      	; 0x1180 <__vector_23+0x2ea>
    117e:	cb ce       	rjmp	.-618    	; 0xf16 <__vector_23+0x80>
    1180:	80 91 0f 01 	lds	r24, 0x010F
    1184:	84 30       	cpi	r24, 0x04	; 4
    1186:	09 f4       	brne	.+2      	; 0x118a <__vector_23+0x2f4>
    1188:	c6 ce       	rjmp	.-628    	; 0xf16 <__vector_23+0x80>
                motors_on();
    118a:	53 9a       	sbi	0x0a, 3	; 10
    118c:	23 9a       	sbi	0x04, 3	; 4
    118e:	10 92 b4 00 	sts	0x00B4, r1
    1192:	10 92 b3 00 	sts	0x00B3, r1
                kilo_state = SETUP;
    1196:	83 e0       	ldi	r24, 0x03	; 3
    1198:	80 93 0f 01 	sts	0x010F, r24
    119c:	bc ce       	rjmp	.-648    	; 0xf16 <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    119e:	80 91 0f 01 	lds	r24, 0x010F
    11a2:	86 30       	cpi	r24, 0x06	; 6
    11a4:	09 f0       	breq	.+2      	; 0x11a8 <__vector_23+0x312>
    11a6:	b7 ce       	rjmp	.-658    	; 0xf16 <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    11a8:	60 91 69 01 	lds	r22, 0x0169
    11ac:	80 eb       	ldi	r24, 0xB0	; 176
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	0e 94 87 0c 	call	0x190e	; 0x190e <__eewr_byte_m328p>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    11b4:	60 91 6a 01 	lds	r22, 0x016A
    11b8:	81 eb       	ldi	r24, 0xB1	; 177
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	0e 94 87 0c 	call	0x190e	; 0x190e <__eewr_byte_m328p>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    11c0:	60 91 6d 01 	lds	r22, 0x016D
    11c4:	85 e0       	ldi	r24, 0x05	; 5
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	0e 94 87 0c 	call	0x190e	; 0x190e <__eewr_byte_m328p>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    11cc:	60 91 59 01 	lds	r22, 0x0159
    11d0:	89 e0       	ldi	r24, 0x09	; 9
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	0e 94 87 0c 	call	0x190e	; 0x190e <__eewr_byte_m328p>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    11d8:	60 91 6b 01 	lds	r22, 0x016B
    11dc:	8c e0       	ldi	r24, 0x0C	; 12
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	0e 94 87 0c 	call	0x190e	; 0x190e <__eewr_byte_m328p>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    11e4:	60 91 6c 01 	lds	r22, 0x016C
    11e8:	84 e1       	ldi	r24, 0x14	; 20
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	0e 94 87 0c 	call	0x190e	; 0x190e <__eewr_byte_m328p>
                        motors_off();
    11f0:	53 98       	cbi	0x0a, 3	; 10
    11f2:	23 98       	cbi	0x04, 3	; 4
    11f4:	10 92 b4 00 	sts	0x00B4, r1
    11f8:	10 92 b3 00 	sts	0x00B3, r1
                        kilo_state = IDLE;
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	80 93 0f 01 	sts	0x010F, r24
    1202:	80 91 5a 01 	lds	r24, 0x015A
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1206:	81 11       	cpse	r24, r1
    1208:	60 cf       	rjmp	.-320    	; 0x10ca <__vector_23+0x234>
    120a:	85 ce       	rjmp	.-758    	; 0xf16 <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    120c:	88 23       	and	r24, r24
    120e:	39 f2       	breq	.-114    	; 0x119e <__vector_23+0x308>
    1210:	81 30       	cpi	r24, 0x01	; 1
    1212:	c9 f7       	brne	.-14     	; 0x1206 <__vector_23+0x370>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    1214:	80 91 5b 01 	lds	r24, 0x015B
    1218:	90 91 5c 01 	lds	r25, 0x015C
    121c:	90 93 6a 01 	sts	0x016A, r25
    1220:	80 93 69 01 	sts	0x0169, r24
                    cur_motion = MOVE_STOP;
    1224:	10 92 0d 01 	sts	0x010D, r1
    1228:	50 cf       	rjmp	.-352    	; 0x10ca <__vector_23+0x234>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    122a:	80 91 0d 01 	lds	r24, 0x010D
    122e:	82 30       	cpi	r24, 0x02	; 2
    1230:	71 f1       	breq	.+92     	; 0x128e <__vector_23+0x3f8>
    1232:	80 91 5e 01 	lds	r24, 0x015E
                        prev_motion = MOVE_STOP;
    1236:	10 92 0e 01 	sts	0x010E, r1
                        cur_motion = MOVE_RIGHT;
    123a:	92 e0       	ldi	r25, 0x02	; 2
    123c:	90 93 0d 01 	sts	0x010D, r25
                        kilo_turn_right = calibmsg->turn_right;
    1240:	80 93 59 01 	sts	0x0159, r24
    1244:	42 cf       	rjmp	.-380    	; 0x10ca <__vector_23+0x234>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	80 93 0d 01 	sts	0x010D, r24
    124c:	64 ce       	rjmp	.-824    	; 0xf16 <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    124e:	80 91 0d 01 	lds	r24, 0x010D
    1252:	81 30       	cpi	r24, 0x01	; 1
    1254:	51 f0       	breq	.+20     	; 0x126a <__vector_23+0x3d4>
    1256:	80 91 5d 01 	lds	r24, 0x015D
                        prev_motion = MOVE_STOP;
    125a:	10 92 0e 01 	sts	0x010E, r1
                        cur_motion = MOVE_LEFT;
    125e:	91 e0       	ldi	r25, 0x01	; 1
    1260:	90 93 0d 01 	sts	0x010D, r25
                        kilo_turn_left = calibmsg->turn_left;
    1264:	80 93 6d 01 	sts	0x016D, r24
    1268:	30 cf       	rjmp	.-416    	; 0x10ca <__vector_23+0x234>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    126a:	80 91 5d 01 	lds	r24, 0x015D
    126e:	90 91 6d 01 	lds	r25, 0x016D
    1272:	89 13       	cpse	r24, r25
    1274:	f2 cf       	rjmp	.-28     	; 0x125a <__vector_23+0x3c4>
    1276:	29 cf       	rjmp	.-430    	; 0x10ca <__vector_23+0x234>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    1278:	80 91 6c 01 	lds	r24, 0x016C
    127c:	98 13       	cpse	r25, r24
    127e:	1a cf       	rjmp	.-460    	; 0x10b4 <__vector_23+0x21e>
    1280:	80 91 5f 01 	lds	r24, 0x015F
    1284:	20 91 6b 01 	lds	r18, 0x016B
    1288:	82 13       	cpse	r24, r18
    128a:	16 cf       	rjmp	.-468    	; 0x10b8 <__vector_23+0x222>
    128c:	1e cf       	rjmp	.-452    	; 0x10ca <__vector_23+0x234>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    128e:	80 91 5e 01 	lds	r24, 0x015E
    1292:	90 91 59 01 	lds	r25, 0x0159
    1296:	89 13       	cpse	r24, r25
    1298:	ce cf       	rjmp	.-100    	; 0x1236 <__vector_23+0x3a0>
    129a:	17 cf       	rjmp	.-466    	; 0x10ca <__vector_23+0x234>

0000129c <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    129c:	fc 01       	movw	r30, r24
    129e:	2a e0       	ldi	r18, 0x0A	; 10
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    12a0:	8f ef       	ldi	r24, 0xFF	; 255
    12a2:	9f ef       	ldi	r25, 0xFF	; 255
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    12a4:	31 91       	ld	r19, Z+
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    12a6:	83 27       	eor	r24, r19
    12a8:	08 2e       	mov	r0, r24
    12aa:	82 95       	swap	r24
    12ac:	80 7f       	andi	r24, 0xF0	; 240
    12ae:	80 25       	eor	r24, r0
    12b0:	09 2e       	mov	r0, r25
    12b2:	98 2f       	mov	r25, r24
    12b4:	82 95       	swap	r24
    12b6:	8f 70       	andi	r24, 0x0F	; 15
    12b8:	08 26       	eor	r0, r24
    12ba:	86 95       	lsr	r24
    12bc:	98 27       	eor	r25, r24
    12be:	89 27       	eor	r24, r25
    12c0:	88 0f       	add	r24, r24
    12c2:	88 0f       	add	r24, r24
    12c4:	88 0f       	add	r24, r24
    12c6:	80 25       	eor	r24, r0
    12c8:	21 50       	subi	r18, 0x01	; 1

uint16_t message_crc(const message_t *msg) {
    uint8_t i;
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
    12ca:	61 f7       	brne	.-40     	; 0x12a4 <message_crc+0x8>
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    12cc:	08 95       	ret

000012ce <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    12ce:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    12d0:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    12d2:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    12d4:	20 91 2d 01 	lds	r18, 0x012D
    or tmpreg1, ddrreg
    12d8:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    12da:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    12dc:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    12de:	30 91 2d 01 	lds	r19, 0x012D
    12e2:	20 30       	cpi	r18, 0x00	; 0
    12e4:	29 f0       	breq	.+10     	; 0x12f0 <message_send+0x22>
    12e6:	00 00       	nop
    12e8:	25 b1       	in	r18, 0x05	; 5
    12ea:	23 2b       	or	r18, r19
    12ec:	25 b9       	out	0x05, r18	; 5
    12ee:	04 c0       	rjmp	.+8      	; 0x12f8 <message_send+0x2a>
    12f0:	00 00       	nop
    12f2:	00 00       	nop
    12f4:	00 00       	nop
    12f6:	00 c0       	rjmp	.+0      	; 0x12f8 <message_send+0x2a>
    12f8:	00 00       	nop
    12fa:	00 00       	nop
    12fc:	00 00       	nop
    12fe:	30 95       	com	r19
    1300:	25 b1       	in	r18, 0x05	; 5
    1302:	23 23       	and	r18, r19
    1304:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    1306:	2e ea       	ldi	r18, 0xAE	; 174
    1308:	2a 95       	dec	r18
    130a:	f1 f7       	brne	.-4      	; 0x1308 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    130c:	2b ee       	ldi	r18, 0xEB	; 235

0000130e <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    130e:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    1310:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    1312:	0a c0       	rjmp	.+20     	; 0x1328 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1314:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1316:	30 91 2d 01 	lds	r19, 0x012D
    com tmpreg2
    131a:	30 95       	com	r19
    in tmpreg1, IR_PORT
    131c:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    131e:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    1320:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1322:	0f be       	out	0x3f, r0	; 63
    return 0
    1324:	80 e0       	ldi	r24, 0x00	; 0
    1326:	08 95       	ret

00001328 <nocollision>:
nocollision:
    nop
    1328:	00 00       	nop
    dec tmpreg1
    132a:	2a 95       	dec	r18
    brne checkcollision
    132c:	81 f7       	brne	.-32     	; 0x130e <checkcollision>

    ldi tmpreg1, 0x01
    132e:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    1330:	30 91 2d 01 	lds	r19, 0x012D
    1334:	20 30       	cpi	r18, 0x00	; 0
    1336:	29 f0       	breq	.+10     	; 0x1342 <nocollision+0x1a>
    1338:	00 00       	nop
    133a:	25 b1       	in	r18, 0x05	; 5
    133c:	23 2b       	or	r18, r19
    133e:	25 b9       	out	0x05, r18	; 5
    1340:	04 c0       	rjmp	.+8      	; 0x134a <nocollision+0x22>
    1342:	00 00       	nop
    1344:	00 00       	nop
    1346:	00 00       	nop
    1348:	00 c0       	rjmp	.+0      	; 0x134a <nocollision+0x22>
    134a:	00 00       	nop
    134c:	00 00       	nop
    134e:	00 00       	nop
    1350:	30 95       	com	r19
    1352:	25 b1       	in	r18, 0x05	; 5
    1354:	23 23       	and	r18, r19
    1356:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    1358:	00 00       	nop
    135a:	24 e5       	ldi	r18, 0x54	; 84
    135c:	2a 95       	dec	r18
    135e:	f1 f7       	brne	.-4      	; 0x135c <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    1360:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    1362:	8c e0       	ldi	r24, 0x0C	; 12

00001364 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    1364:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    1366:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    1368:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    136a:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    136c:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    136e:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    1370:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    1372:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    1374:	50 e0       	ldi	r21, 0x00	; 0

00001376 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    1376:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    1378:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    137a:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    137c:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    137e:	30 91 2d 01 	lds	r19, 0x012D
    1382:	20 30       	cpi	r18, 0x00	; 0
    1384:	29 f0       	breq	.+10     	; 0x1390 <sendbit+0x1a>
    1386:	00 00       	nop
    1388:	25 b1       	in	r18, 0x05	; 5
    138a:	23 2b       	or	r18, r19
    138c:	25 b9       	out	0x05, r18	; 5
    138e:	04 c0       	rjmp	.+8      	; 0x1398 <sendbit+0x22>
    1390:	00 00       	nop
    1392:	00 00       	nop
    1394:	00 00       	nop
    1396:	00 c0       	rjmp	.+0      	; 0x1398 <sendbit+0x22>
    1398:	00 00       	nop
    139a:	00 00       	nop
    139c:	00 00       	nop
    139e:	30 95       	com	r19
    13a0:	25 b1       	in	r18, 0x05	; 5
    13a2:	23 23       	and	r18, r19
    13a4:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    13a6:	00 00       	nop
    13a8:	21 e5       	ldi	r18, 0x51	; 81
    13aa:	2a 95       	dec	r18
    13ac:	f1 f7       	brne	.-4      	; 0x13aa <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    13ae:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    13b0:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    13b2:	9a 95       	dec	r25
    brne sendbit
    13b4:	01 f7       	brne	.-64     	; 0x1376 <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    13b6:	8a 95       	dec	r24
    brne sendbyte
    13b8:	a9 f6       	brne	.-86     	; 0x1364 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    13ba:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    13bc:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    13be:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    13c0:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    13c2:	30 91 2d 01 	lds	r19, 0x012D
    com tmpreg2
    13c6:	30 95       	com	r19
    in tmpreg1, IR_PORT
    13c8:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    13ca:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    13cc:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    13ce:	0f be       	out	0x3f, r0	; 63
    return 1
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	08 95       	ret

000013d4 <main>:
}

int main() {
    kilo_init();
    13d4:	0e 94 82 00 	call	0x104	; 0x104 <kilo_init>
    kilo_start(setup, loop);
    13d8:	6f e6       	ldi	r22, 0x6F	; 111
    13da:	70 e0       	ldi	r23, 0x00	; 0
    13dc:	8e e6       	ldi	r24, 0x6E	; 110
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <kilo_start>

    return 0;
}
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	08 95       	ret

000013ea <__umulhisi3>:
    13ea:	a2 9f       	mul	r26, r18
    13ec:	b0 01       	movw	r22, r0
    13ee:	b3 9f       	mul	r27, r19
    13f0:	c0 01       	movw	r24, r0
    13f2:	a3 9f       	mul	r26, r19
    13f4:	70 0d       	add	r23, r0
    13f6:	81 1d       	adc	r24, r1
    13f8:	11 24       	eor	r1, r1
    13fa:	91 1d       	adc	r25, r1
    13fc:	b2 9f       	mul	r27, r18
    13fe:	70 0d       	add	r23, r0
    1400:	81 1d       	adc	r24, r1
    1402:	11 24       	eor	r1, r1
    1404:	91 1d       	adc	r25, r1
    1406:	08 95       	ret

00001408 <__divmodhi4>:
    1408:	97 fb       	bst	r25, 7
    140a:	07 2e       	mov	r0, r23
    140c:	16 f4       	brtc	.+4      	; 0x1412 <__divmodhi4+0xa>
    140e:	00 94       	com	r0
    1410:	07 d0       	rcall	.+14     	; 0x1420 <__divmodhi4_neg1>
    1412:	77 fd       	sbrc	r23, 7
    1414:	09 d0       	rcall	.+18     	; 0x1428 <__divmodhi4_neg2>
    1416:	0e 94 1e 0a 	call	0x143c	; 0x143c <__udivmodhi4>
    141a:	07 fc       	sbrc	r0, 7
    141c:	05 d0       	rcall	.+10     	; 0x1428 <__divmodhi4_neg2>
    141e:	3e f4       	brtc	.+14     	; 0x142e <__divmodhi4_exit>

00001420 <__divmodhi4_neg1>:
    1420:	90 95       	com	r25
    1422:	81 95       	neg	r24
    1424:	9f 4f       	sbci	r25, 0xFF	; 255
    1426:	08 95       	ret

00001428 <__divmodhi4_neg2>:
    1428:	70 95       	com	r23
    142a:	61 95       	neg	r22
    142c:	7f 4f       	sbci	r23, 0xFF	; 255

0000142e <__divmodhi4_exit>:
    142e:	08 95       	ret

00001430 <__tablejump2__>:
    1430:	ee 0f       	add	r30, r30
    1432:	ff 1f       	adc	r31, r31

00001434 <__tablejump__>:
    1434:	05 90       	lpm	r0, Z+
    1436:	f4 91       	lpm	r31, Z
    1438:	e0 2d       	mov	r30, r0
    143a:	09 94       	ijmp

0000143c <__udivmodhi4>:
    143c:	aa 1b       	sub	r26, r26
    143e:	bb 1b       	sub	r27, r27
    1440:	51 e1       	ldi	r21, 0x11	; 17
    1442:	07 c0       	rjmp	.+14     	; 0x1452 <__udivmodhi4_ep>

00001444 <__udivmodhi4_loop>:
    1444:	aa 1f       	adc	r26, r26
    1446:	bb 1f       	adc	r27, r27
    1448:	a6 17       	cp	r26, r22
    144a:	b7 07       	cpc	r27, r23
    144c:	10 f0       	brcs	.+4      	; 0x1452 <__udivmodhi4_ep>
    144e:	a6 1b       	sub	r26, r22
    1450:	b7 0b       	sbc	r27, r23

00001452 <__udivmodhi4_ep>:
    1452:	88 1f       	adc	r24, r24
    1454:	99 1f       	adc	r25, r25
    1456:	5a 95       	dec	r21
    1458:	a9 f7       	brne	.-22     	; 0x1444 <__udivmodhi4_loop>
    145a:	80 95       	com	r24
    145c:	90 95       	com	r25
    145e:	bc 01       	movw	r22, r24
    1460:	cd 01       	movw	r24, r26
    1462:	08 95       	ret

00001464 <__subsf3>:
    1464:	50 58       	subi	r21, 0x80	; 128

00001466 <__addsf3>:
    1466:	bb 27       	eor	r27, r27
    1468:	aa 27       	eor	r26, r26
    146a:	0e d0       	rcall	.+28     	; 0x1488 <__addsf3x>
    146c:	4d c1       	rjmp	.+666    	; 0x1708 <__fp_round>
    146e:	3e d1       	rcall	.+636    	; 0x16ec <__fp_pscA>
    1470:	30 f0       	brcs	.+12     	; 0x147e <__addsf3+0x18>
    1472:	43 d1       	rcall	.+646    	; 0x16fa <__fp_pscB>
    1474:	20 f0       	brcs	.+8      	; 0x147e <__addsf3+0x18>
    1476:	31 f4       	brne	.+12     	; 0x1484 <__addsf3+0x1e>
    1478:	9f 3f       	cpi	r25, 0xFF	; 255
    147a:	11 f4       	brne	.+4      	; 0x1480 <__addsf3+0x1a>
    147c:	1e f4       	brtc	.+6      	; 0x1484 <__addsf3+0x1e>
    147e:	33 c1       	rjmp	.+614    	; 0x16e6 <__fp_nan>
    1480:	0e f4       	brtc	.+2      	; 0x1484 <__addsf3+0x1e>
    1482:	e0 95       	com	r30
    1484:	e7 fb       	bst	r30, 7
    1486:	29 c1       	rjmp	.+594    	; 0x16da <__fp_inf>

00001488 <__addsf3x>:
    1488:	e9 2f       	mov	r30, r25
    148a:	4f d1       	rcall	.+670    	; 0x172a <__fp_split3>
    148c:	80 f3       	brcs	.-32     	; 0x146e <__addsf3+0x8>
    148e:	ba 17       	cp	r27, r26
    1490:	62 07       	cpc	r22, r18
    1492:	73 07       	cpc	r23, r19
    1494:	84 07       	cpc	r24, r20
    1496:	95 07       	cpc	r25, r21
    1498:	18 f0       	brcs	.+6      	; 0x14a0 <__addsf3x+0x18>
    149a:	71 f4       	brne	.+28     	; 0x14b8 <__addsf3x+0x30>
    149c:	9e f5       	brtc	.+102    	; 0x1504 <__addsf3x+0x7c>
    149e:	67 c1       	rjmp	.+718    	; 0x176e <__fp_zero>
    14a0:	0e f4       	brtc	.+2      	; 0x14a4 <__addsf3x+0x1c>
    14a2:	e0 95       	com	r30
    14a4:	0b 2e       	mov	r0, r27
    14a6:	ba 2f       	mov	r27, r26
    14a8:	a0 2d       	mov	r26, r0
    14aa:	0b 01       	movw	r0, r22
    14ac:	b9 01       	movw	r22, r18
    14ae:	90 01       	movw	r18, r0
    14b0:	0c 01       	movw	r0, r24
    14b2:	ca 01       	movw	r24, r20
    14b4:	a0 01       	movw	r20, r0
    14b6:	11 24       	eor	r1, r1
    14b8:	ff 27       	eor	r31, r31
    14ba:	59 1b       	sub	r21, r25
    14bc:	99 f0       	breq	.+38     	; 0x14e4 <__addsf3x+0x5c>
    14be:	59 3f       	cpi	r21, 0xF9	; 249
    14c0:	50 f4       	brcc	.+20     	; 0x14d6 <__addsf3x+0x4e>
    14c2:	50 3e       	cpi	r21, 0xE0	; 224
    14c4:	68 f1       	brcs	.+90     	; 0x1520 <__addsf3x+0x98>
    14c6:	1a 16       	cp	r1, r26
    14c8:	f0 40       	sbci	r31, 0x00	; 0
    14ca:	a2 2f       	mov	r26, r18
    14cc:	23 2f       	mov	r18, r19
    14ce:	34 2f       	mov	r19, r20
    14d0:	44 27       	eor	r20, r20
    14d2:	58 5f       	subi	r21, 0xF8	; 248
    14d4:	f3 cf       	rjmp	.-26     	; 0x14bc <__addsf3x+0x34>
    14d6:	46 95       	lsr	r20
    14d8:	37 95       	ror	r19
    14da:	27 95       	ror	r18
    14dc:	a7 95       	ror	r26
    14de:	f0 40       	sbci	r31, 0x00	; 0
    14e0:	53 95       	inc	r21
    14e2:	c9 f7       	brne	.-14     	; 0x14d6 <__addsf3x+0x4e>
    14e4:	7e f4       	brtc	.+30     	; 0x1504 <__addsf3x+0x7c>
    14e6:	1f 16       	cp	r1, r31
    14e8:	ba 0b       	sbc	r27, r26
    14ea:	62 0b       	sbc	r22, r18
    14ec:	73 0b       	sbc	r23, r19
    14ee:	84 0b       	sbc	r24, r20
    14f0:	ba f0       	brmi	.+46     	; 0x1520 <__addsf3x+0x98>
    14f2:	91 50       	subi	r25, 0x01	; 1
    14f4:	a1 f0       	breq	.+40     	; 0x151e <__addsf3x+0x96>
    14f6:	ff 0f       	add	r31, r31
    14f8:	bb 1f       	adc	r27, r27
    14fa:	66 1f       	adc	r22, r22
    14fc:	77 1f       	adc	r23, r23
    14fe:	88 1f       	adc	r24, r24
    1500:	c2 f7       	brpl	.-16     	; 0x14f2 <__addsf3x+0x6a>
    1502:	0e c0       	rjmp	.+28     	; 0x1520 <__addsf3x+0x98>
    1504:	ba 0f       	add	r27, r26
    1506:	62 1f       	adc	r22, r18
    1508:	73 1f       	adc	r23, r19
    150a:	84 1f       	adc	r24, r20
    150c:	48 f4       	brcc	.+18     	; 0x1520 <__addsf3x+0x98>
    150e:	87 95       	ror	r24
    1510:	77 95       	ror	r23
    1512:	67 95       	ror	r22
    1514:	b7 95       	ror	r27
    1516:	f7 95       	ror	r31
    1518:	9e 3f       	cpi	r25, 0xFE	; 254
    151a:	08 f0       	brcs	.+2      	; 0x151e <__addsf3x+0x96>
    151c:	b3 cf       	rjmp	.-154    	; 0x1484 <__addsf3+0x1e>
    151e:	93 95       	inc	r25
    1520:	88 0f       	add	r24, r24
    1522:	08 f0       	brcs	.+2      	; 0x1526 <__addsf3x+0x9e>
    1524:	99 27       	eor	r25, r25
    1526:	ee 0f       	add	r30, r30
    1528:	97 95       	ror	r25
    152a:	87 95       	ror	r24
    152c:	08 95       	ret

0000152e <__divsf3>:
    152e:	0c d0       	rcall	.+24     	; 0x1548 <__divsf3x>
    1530:	eb c0       	rjmp	.+470    	; 0x1708 <__fp_round>
    1532:	e3 d0       	rcall	.+454    	; 0x16fa <__fp_pscB>
    1534:	40 f0       	brcs	.+16     	; 0x1546 <__divsf3+0x18>
    1536:	da d0       	rcall	.+436    	; 0x16ec <__fp_pscA>
    1538:	30 f0       	brcs	.+12     	; 0x1546 <__divsf3+0x18>
    153a:	21 f4       	brne	.+8      	; 0x1544 <__divsf3+0x16>
    153c:	5f 3f       	cpi	r21, 0xFF	; 255
    153e:	19 f0       	breq	.+6      	; 0x1546 <__divsf3+0x18>
    1540:	cc c0       	rjmp	.+408    	; 0x16da <__fp_inf>
    1542:	51 11       	cpse	r21, r1
    1544:	15 c1       	rjmp	.+554    	; 0x1770 <__fp_szero>
    1546:	cf c0       	rjmp	.+414    	; 0x16e6 <__fp_nan>

00001548 <__divsf3x>:
    1548:	f0 d0       	rcall	.+480    	; 0x172a <__fp_split3>
    154a:	98 f3       	brcs	.-26     	; 0x1532 <__divsf3+0x4>

0000154c <__divsf3_pse>:
    154c:	99 23       	and	r25, r25
    154e:	c9 f3       	breq	.-14     	; 0x1542 <__divsf3+0x14>
    1550:	55 23       	and	r21, r21
    1552:	b1 f3       	breq	.-20     	; 0x1540 <__divsf3+0x12>
    1554:	95 1b       	sub	r25, r21
    1556:	55 0b       	sbc	r21, r21
    1558:	bb 27       	eor	r27, r27
    155a:	aa 27       	eor	r26, r26
    155c:	62 17       	cp	r22, r18
    155e:	73 07       	cpc	r23, r19
    1560:	84 07       	cpc	r24, r20
    1562:	38 f0       	brcs	.+14     	; 0x1572 <__divsf3_pse+0x26>
    1564:	9f 5f       	subi	r25, 0xFF	; 255
    1566:	5f 4f       	sbci	r21, 0xFF	; 255
    1568:	22 0f       	add	r18, r18
    156a:	33 1f       	adc	r19, r19
    156c:	44 1f       	adc	r20, r20
    156e:	aa 1f       	adc	r26, r26
    1570:	a9 f3       	breq	.-22     	; 0x155c <__divsf3_pse+0x10>
    1572:	33 d0       	rcall	.+102    	; 0x15da <__divsf3_pse+0x8e>
    1574:	0e 2e       	mov	r0, r30
    1576:	3a f0       	brmi	.+14     	; 0x1586 <__divsf3_pse+0x3a>
    1578:	e0 e8       	ldi	r30, 0x80	; 128
    157a:	30 d0       	rcall	.+96     	; 0x15dc <__divsf3_pse+0x90>
    157c:	91 50       	subi	r25, 0x01	; 1
    157e:	50 40       	sbci	r21, 0x00	; 0
    1580:	e6 95       	lsr	r30
    1582:	00 1c       	adc	r0, r0
    1584:	ca f7       	brpl	.-14     	; 0x1578 <__divsf3_pse+0x2c>
    1586:	29 d0       	rcall	.+82     	; 0x15da <__divsf3_pse+0x8e>
    1588:	fe 2f       	mov	r31, r30
    158a:	27 d0       	rcall	.+78     	; 0x15da <__divsf3_pse+0x8e>
    158c:	66 0f       	add	r22, r22
    158e:	77 1f       	adc	r23, r23
    1590:	88 1f       	adc	r24, r24
    1592:	bb 1f       	adc	r27, r27
    1594:	26 17       	cp	r18, r22
    1596:	37 07       	cpc	r19, r23
    1598:	48 07       	cpc	r20, r24
    159a:	ab 07       	cpc	r26, r27
    159c:	b0 e8       	ldi	r27, 0x80	; 128
    159e:	09 f0       	breq	.+2      	; 0x15a2 <__divsf3_pse+0x56>
    15a0:	bb 0b       	sbc	r27, r27
    15a2:	80 2d       	mov	r24, r0
    15a4:	bf 01       	movw	r22, r30
    15a6:	ff 27       	eor	r31, r31
    15a8:	93 58       	subi	r25, 0x83	; 131
    15aa:	5f 4f       	sbci	r21, 0xFF	; 255
    15ac:	2a f0       	brmi	.+10     	; 0x15b8 <__divsf3_pse+0x6c>
    15ae:	9e 3f       	cpi	r25, 0xFE	; 254
    15b0:	51 05       	cpc	r21, r1
    15b2:	68 f0       	brcs	.+26     	; 0x15ce <__divsf3_pse+0x82>
    15b4:	92 c0       	rjmp	.+292    	; 0x16da <__fp_inf>
    15b6:	dc c0       	rjmp	.+440    	; 0x1770 <__fp_szero>
    15b8:	5f 3f       	cpi	r21, 0xFF	; 255
    15ba:	ec f3       	brlt	.-6      	; 0x15b6 <__divsf3_pse+0x6a>
    15bc:	98 3e       	cpi	r25, 0xE8	; 232
    15be:	dc f3       	brlt	.-10     	; 0x15b6 <__divsf3_pse+0x6a>
    15c0:	86 95       	lsr	r24
    15c2:	77 95       	ror	r23
    15c4:	67 95       	ror	r22
    15c6:	b7 95       	ror	r27
    15c8:	f7 95       	ror	r31
    15ca:	9f 5f       	subi	r25, 0xFF	; 255
    15cc:	c9 f7       	brne	.-14     	; 0x15c0 <__divsf3_pse+0x74>
    15ce:	88 0f       	add	r24, r24
    15d0:	91 1d       	adc	r25, r1
    15d2:	96 95       	lsr	r25
    15d4:	87 95       	ror	r24
    15d6:	97 f9       	bld	r25, 7
    15d8:	08 95       	ret
    15da:	e1 e0       	ldi	r30, 0x01	; 1
    15dc:	66 0f       	add	r22, r22
    15de:	77 1f       	adc	r23, r23
    15e0:	88 1f       	adc	r24, r24
    15e2:	bb 1f       	adc	r27, r27
    15e4:	62 17       	cp	r22, r18
    15e6:	73 07       	cpc	r23, r19
    15e8:	84 07       	cpc	r24, r20
    15ea:	ba 07       	cpc	r27, r26
    15ec:	20 f0       	brcs	.+8      	; 0x15f6 <__divsf3_pse+0xaa>
    15ee:	62 1b       	sub	r22, r18
    15f0:	73 0b       	sbc	r23, r19
    15f2:	84 0b       	sbc	r24, r20
    15f4:	ba 0b       	sbc	r27, r26
    15f6:	ee 1f       	adc	r30, r30
    15f8:	88 f7       	brcc	.-30     	; 0x15dc <__divsf3_pse+0x90>
    15fa:	e0 95       	com	r30
    15fc:	08 95       	ret

000015fe <__fixsfsi>:
    15fe:	04 d0       	rcall	.+8      	; 0x1608 <__fixunssfsi>
    1600:	68 94       	set
    1602:	b1 11       	cpse	r27, r1
    1604:	b5 c0       	rjmp	.+362    	; 0x1770 <__fp_szero>
    1606:	08 95       	ret

00001608 <__fixunssfsi>:
    1608:	98 d0       	rcall	.+304    	; 0x173a <__fp_splitA>
    160a:	88 f0       	brcs	.+34     	; 0x162e <__fixunssfsi+0x26>
    160c:	9f 57       	subi	r25, 0x7F	; 127
    160e:	90 f0       	brcs	.+36     	; 0x1634 <__fixunssfsi+0x2c>
    1610:	b9 2f       	mov	r27, r25
    1612:	99 27       	eor	r25, r25
    1614:	b7 51       	subi	r27, 0x17	; 23
    1616:	a0 f0       	brcs	.+40     	; 0x1640 <__fixunssfsi+0x38>
    1618:	d1 f0       	breq	.+52     	; 0x164e <__fixunssfsi+0x46>
    161a:	66 0f       	add	r22, r22
    161c:	77 1f       	adc	r23, r23
    161e:	88 1f       	adc	r24, r24
    1620:	99 1f       	adc	r25, r25
    1622:	1a f0       	brmi	.+6      	; 0x162a <__fixunssfsi+0x22>
    1624:	ba 95       	dec	r27
    1626:	c9 f7       	brne	.-14     	; 0x161a <__fixunssfsi+0x12>
    1628:	12 c0       	rjmp	.+36     	; 0x164e <__fixunssfsi+0x46>
    162a:	b1 30       	cpi	r27, 0x01	; 1
    162c:	81 f0       	breq	.+32     	; 0x164e <__fixunssfsi+0x46>
    162e:	9f d0       	rcall	.+318    	; 0x176e <__fp_zero>
    1630:	b1 e0       	ldi	r27, 0x01	; 1
    1632:	08 95       	ret
    1634:	9c c0       	rjmp	.+312    	; 0x176e <__fp_zero>
    1636:	67 2f       	mov	r22, r23
    1638:	78 2f       	mov	r23, r24
    163a:	88 27       	eor	r24, r24
    163c:	b8 5f       	subi	r27, 0xF8	; 248
    163e:	39 f0       	breq	.+14     	; 0x164e <__fixunssfsi+0x46>
    1640:	b9 3f       	cpi	r27, 0xF9	; 249
    1642:	cc f3       	brlt	.-14     	; 0x1636 <__fixunssfsi+0x2e>
    1644:	86 95       	lsr	r24
    1646:	77 95       	ror	r23
    1648:	67 95       	ror	r22
    164a:	b3 95       	inc	r27
    164c:	d9 f7       	brne	.-10     	; 0x1644 <__fixunssfsi+0x3c>
    164e:	3e f4       	brtc	.+14     	; 0x165e <__fixunssfsi+0x56>
    1650:	90 95       	com	r25
    1652:	80 95       	com	r24
    1654:	70 95       	com	r23
    1656:	61 95       	neg	r22
    1658:	7f 4f       	sbci	r23, 0xFF	; 255
    165a:	8f 4f       	sbci	r24, 0xFF	; 255
    165c:	9f 4f       	sbci	r25, 0xFF	; 255
    165e:	08 95       	ret

00001660 <__floatunsisf>:
    1660:	e8 94       	clt
    1662:	09 c0       	rjmp	.+18     	; 0x1676 <__floatsisf+0x12>

00001664 <__floatsisf>:
    1664:	97 fb       	bst	r25, 7
    1666:	3e f4       	brtc	.+14     	; 0x1676 <__floatsisf+0x12>
    1668:	90 95       	com	r25
    166a:	80 95       	com	r24
    166c:	70 95       	com	r23
    166e:	61 95       	neg	r22
    1670:	7f 4f       	sbci	r23, 0xFF	; 255
    1672:	8f 4f       	sbci	r24, 0xFF	; 255
    1674:	9f 4f       	sbci	r25, 0xFF	; 255
    1676:	99 23       	and	r25, r25
    1678:	a9 f0       	breq	.+42     	; 0x16a4 <__floatsisf+0x40>
    167a:	f9 2f       	mov	r31, r25
    167c:	96 e9       	ldi	r25, 0x96	; 150
    167e:	bb 27       	eor	r27, r27
    1680:	93 95       	inc	r25
    1682:	f6 95       	lsr	r31
    1684:	87 95       	ror	r24
    1686:	77 95       	ror	r23
    1688:	67 95       	ror	r22
    168a:	b7 95       	ror	r27
    168c:	f1 11       	cpse	r31, r1
    168e:	f8 cf       	rjmp	.-16     	; 0x1680 <__floatsisf+0x1c>
    1690:	fa f4       	brpl	.+62     	; 0x16d0 <__floatsisf+0x6c>
    1692:	bb 0f       	add	r27, r27
    1694:	11 f4       	brne	.+4      	; 0x169a <__floatsisf+0x36>
    1696:	60 ff       	sbrs	r22, 0
    1698:	1b c0       	rjmp	.+54     	; 0x16d0 <__floatsisf+0x6c>
    169a:	6f 5f       	subi	r22, 0xFF	; 255
    169c:	7f 4f       	sbci	r23, 0xFF	; 255
    169e:	8f 4f       	sbci	r24, 0xFF	; 255
    16a0:	9f 4f       	sbci	r25, 0xFF	; 255
    16a2:	16 c0       	rjmp	.+44     	; 0x16d0 <__floatsisf+0x6c>
    16a4:	88 23       	and	r24, r24
    16a6:	11 f0       	breq	.+4      	; 0x16ac <__floatsisf+0x48>
    16a8:	96 e9       	ldi	r25, 0x96	; 150
    16aa:	11 c0       	rjmp	.+34     	; 0x16ce <__floatsisf+0x6a>
    16ac:	77 23       	and	r23, r23
    16ae:	21 f0       	breq	.+8      	; 0x16b8 <__floatsisf+0x54>
    16b0:	9e e8       	ldi	r25, 0x8E	; 142
    16b2:	87 2f       	mov	r24, r23
    16b4:	76 2f       	mov	r23, r22
    16b6:	05 c0       	rjmp	.+10     	; 0x16c2 <__floatsisf+0x5e>
    16b8:	66 23       	and	r22, r22
    16ba:	71 f0       	breq	.+28     	; 0x16d8 <__floatsisf+0x74>
    16bc:	96 e8       	ldi	r25, 0x86	; 134
    16be:	86 2f       	mov	r24, r22
    16c0:	70 e0       	ldi	r23, 0x00	; 0
    16c2:	60 e0       	ldi	r22, 0x00	; 0
    16c4:	2a f0       	brmi	.+10     	; 0x16d0 <__floatsisf+0x6c>
    16c6:	9a 95       	dec	r25
    16c8:	66 0f       	add	r22, r22
    16ca:	77 1f       	adc	r23, r23
    16cc:	88 1f       	adc	r24, r24
    16ce:	da f7       	brpl	.-10     	; 0x16c6 <__floatsisf+0x62>
    16d0:	88 0f       	add	r24, r24
    16d2:	96 95       	lsr	r25
    16d4:	87 95       	ror	r24
    16d6:	97 f9       	bld	r25, 7
    16d8:	08 95       	ret

000016da <__fp_inf>:
    16da:	97 f9       	bld	r25, 7
    16dc:	9f 67       	ori	r25, 0x7F	; 127
    16de:	80 e8       	ldi	r24, 0x80	; 128
    16e0:	70 e0       	ldi	r23, 0x00	; 0
    16e2:	60 e0       	ldi	r22, 0x00	; 0
    16e4:	08 95       	ret

000016e6 <__fp_nan>:
    16e6:	9f ef       	ldi	r25, 0xFF	; 255
    16e8:	80 ec       	ldi	r24, 0xC0	; 192
    16ea:	08 95       	ret

000016ec <__fp_pscA>:
    16ec:	00 24       	eor	r0, r0
    16ee:	0a 94       	dec	r0
    16f0:	16 16       	cp	r1, r22
    16f2:	17 06       	cpc	r1, r23
    16f4:	18 06       	cpc	r1, r24
    16f6:	09 06       	cpc	r0, r25
    16f8:	08 95       	ret

000016fa <__fp_pscB>:
    16fa:	00 24       	eor	r0, r0
    16fc:	0a 94       	dec	r0
    16fe:	12 16       	cp	r1, r18
    1700:	13 06       	cpc	r1, r19
    1702:	14 06       	cpc	r1, r20
    1704:	05 06       	cpc	r0, r21
    1706:	08 95       	ret

00001708 <__fp_round>:
    1708:	09 2e       	mov	r0, r25
    170a:	03 94       	inc	r0
    170c:	00 0c       	add	r0, r0
    170e:	11 f4       	brne	.+4      	; 0x1714 <__fp_round+0xc>
    1710:	88 23       	and	r24, r24
    1712:	52 f0       	brmi	.+20     	; 0x1728 <__fp_round+0x20>
    1714:	bb 0f       	add	r27, r27
    1716:	40 f4       	brcc	.+16     	; 0x1728 <__fp_round+0x20>
    1718:	bf 2b       	or	r27, r31
    171a:	11 f4       	brne	.+4      	; 0x1720 <__fp_round+0x18>
    171c:	60 ff       	sbrs	r22, 0
    171e:	04 c0       	rjmp	.+8      	; 0x1728 <__fp_round+0x20>
    1720:	6f 5f       	subi	r22, 0xFF	; 255
    1722:	7f 4f       	sbci	r23, 0xFF	; 255
    1724:	8f 4f       	sbci	r24, 0xFF	; 255
    1726:	9f 4f       	sbci	r25, 0xFF	; 255
    1728:	08 95       	ret

0000172a <__fp_split3>:
    172a:	57 fd       	sbrc	r21, 7
    172c:	90 58       	subi	r25, 0x80	; 128
    172e:	44 0f       	add	r20, r20
    1730:	55 1f       	adc	r21, r21
    1732:	59 f0       	breq	.+22     	; 0x174a <__fp_splitA+0x10>
    1734:	5f 3f       	cpi	r21, 0xFF	; 255
    1736:	71 f0       	breq	.+28     	; 0x1754 <__fp_splitA+0x1a>
    1738:	47 95       	ror	r20

0000173a <__fp_splitA>:
    173a:	88 0f       	add	r24, r24
    173c:	97 fb       	bst	r25, 7
    173e:	99 1f       	adc	r25, r25
    1740:	61 f0       	breq	.+24     	; 0x175a <__fp_splitA+0x20>
    1742:	9f 3f       	cpi	r25, 0xFF	; 255
    1744:	79 f0       	breq	.+30     	; 0x1764 <__fp_splitA+0x2a>
    1746:	87 95       	ror	r24
    1748:	08 95       	ret
    174a:	12 16       	cp	r1, r18
    174c:	13 06       	cpc	r1, r19
    174e:	14 06       	cpc	r1, r20
    1750:	55 1f       	adc	r21, r21
    1752:	f2 cf       	rjmp	.-28     	; 0x1738 <__fp_split3+0xe>
    1754:	46 95       	lsr	r20
    1756:	f1 df       	rcall	.-30     	; 0x173a <__fp_splitA>
    1758:	08 c0       	rjmp	.+16     	; 0x176a <__fp_splitA+0x30>
    175a:	16 16       	cp	r1, r22
    175c:	17 06       	cpc	r1, r23
    175e:	18 06       	cpc	r1, r24
    1760:	99 1f       	adc	r25, r25
    1762:	f1 cf       	rjmp	.-30     	; 0x1746 <__fp_splitA+0xc>
    1764:	86 95       	lsr	r24
    1766:	71 05       	cpc	r23, r1
    1768:	61 05       	cpc	r22, r1
    176a:	08 94       	sec
    176c:	08 95       	ret

0000176e <__fp_zero>:
    176e:	e8 94       	clt

00001770 <__fp_szero>:
    1770:	bb 27       	eor	r27, r27
    1772:	66 27       	eor	r22, r22
    1774:	77 27       	eor	r23, r23
    1776:	cb 01       	movw	r24, r22
    1778:	97 f9       	bld	r25, 7
    177a:	08 95       	ret

0000177c <__mulsf3>:
    177c:	0b d0       	rcall	.+22     	; 0x1794 <__mulsf3x>
    177e:	c4 cf       	rjmp	.-120    	; 0x1708 <__fp_round>
    1780:	b5 df       	rcall	.-150    	; 0x16ec <__fp_pscA>
    1782:	28 f0       	brcs	.+10     	; 0x178e <__mulsf3+0x12>
    1784:	ba df       	rcall	.-140    	; 0x16fa <__fp_pscB>
    1786:	18 f0       	brcs	.+6      	; 0x178e <__mulsf3+0x12>
    1788:	95 23       	and	r25, r21
    178a:	09 f0       	breq	.+2      	; 0x178e <__mulsf3+0x12>
    178c:	a6 cf       	rjmp	.-180    	; 0x16da <__fp_inf>
    178e:	ab cf       	rjmp	.-170    	; 0x16e6 <__fp_nan>
    1790:	11 24       	eor	r1, r1
    1792:	ee cf       	rjmp	.-36     	; 0x1770 <__fp_szero>

00001794 <__mulsf3x>:
    1794:	ca df       	rcall	.-108    	; 0x172a <__fp_split3>
    1796:	a0 f3       	brcs	.-24     	; 0x1780 <__mulsf3+0x4>

00001798 <__mulsf3_pse>:
    1798:	95 9f       	mul	r25, r21
    179a:	d1 f3       	breq	.-12     	; 0x1790 <__mulsf3+0x14>
    179c:	95 0f       	add	r25, r21
    179e:	50 e0       	ldi	r21, 0x00	; 0
    17a0:	55 1f       	adc	r21, r21
    17a2:	62 9f       	mul	r22, r18
    17a4:	f0 01       	movw	r30, r0
    17a6:	72 9f       	mul	r23, r18
    17a8:	bb 27       	eor	r27, r27
    17aa:	f0 0d       	add	r31, r0
    17ac:	b1 1d       	adc	r27, r1
    17ae:	63 9f       	mul	r22, r19
    17b0:	aa 27       	eor	r26, r26
    17b2:	f0 0d       	add	r31, r0
    17b4:	b1 1d       	adc	r27, r1
    17b6:	aa 1f       	adc	r26, r26
    17b8:	64 9f       	mul	r22, r20
    17ba:	66 27       	eor	r22, r22
    17bc:	b0 0d       	add	r27, r0
    17be:	a1 1d       	adc	r26, r1
    17c0:	66 1f       	adc	r22, r22
    17c2:	82 9f       	mul	r24, r18
    17c4:	22 27       	eor	r18, r18
    17c6:	b0 0d       	add	r27, r0
    17c8:	a1 1d       	adc	r26, r1
    17ca:	62 1f       	adc	r22, r18
    17cc:	73 9f       	mul	r23, r19
    17ce:	b0 0d       	add	r27, r0
    17d0:	a1 1d       	adc	r26, r1
    17d2:	62 1f       	adc	r22, r18
    17d4:	83 9f       	mul	r24, r19
    17d6:	a0 0d       	add	r26, r0
    17d8:	61 1d       	adc	r22, r1
    17da:	22 1f       	adc	r18, r18
    17dc:	74 9f       	mul	r23, r20
    17de:	33 27       	eor	r19, r19
    17e0:	a0 0d       	add	r26, r0
    17e2:	61 1d       	adc	r22, r1
    17e4:	23 1f       	adc	r18, r19
    17e6:	84 9f       	mul	r24, r20
    17e8:	60 0d       	add	r22, r0
    17ea:	21 1d       	adc	r18, r1
    17ec:	82 2f       	mov	r24, r18
    17ee:	76 2f       	mov	r23, r22
    17f0:	6a 2f       	mov	r22, r26
    17f2:	11 24       	eor	r1, r1
    17f4:	9f 57       	subi	r25, 0x7F	; 127
    17f6:	50 40       	sbci	r21, 0x00	; 0
    17f8:	8a f0       	brmi	.+34     	; 0x181c <__mulsf3_pse+0x84>
    17fa:	e1 f0       	breq	.+56     	; 0x1834 <__mulsf3_pse+0x9c>
    17fc:	88 23       	and	r24, r24
    17fe:	4a f0       	brmi	.+18     	; 0x1812 <__mulsf3_pse+0x7a>
    1800:	ee 0f       	add	r30, r30
    1802:	ff 1f       	adc	r31, r31
    1804:	bb 1f       	adc	r27, r27
    1806:	66 1f       	adc	r22, r22
    1808:	77 1f       	adc	r23, r23
    180a:	88 1f       	adc	r24, r24
    180c:	91 50       	subi	r25, 0x01	; 1
    180e:	50 40       	sbci	r21, 0x00	; 0
    1810:	a9 f7       	brne	.-22     	; 0x17fc <__mulsf3_pse+0x64>
    1812:	9e 3f       	cpi	r25, 0xFE	; 254
    1814:	51 05       	cpc	r21, r1
    1816:	70 f0       	brcs	.+28     	; 0x1834 <__mulsf3_pse+0x9c>
    1818:	60 cf       	rjmp	.-320    	; 0x16da <__fp_inf>
    181a:	aa cf       	rjmp	.-172    	; 0x1770 <__fp_szero>
    181c:	5f 3f       	cpi	r21, 0xFF	; 255
    181e:	ec f3       	brlt	.-6      	; 0x181a <__mulsf3_pse+0x82>
    1820:	98 3e       	cpi	r25, 0xE8	; 232
    1822:	dc f3       	brlt	.-10     	; 0x181a <__mulsf3_pse+0x82>
    1824:	86 95       	lsr	r24
    1826:	77 95       	ror	r23
    1828:	67 95       	ror	r22
    182a:	b7 95       	ror	r27
    182c:	f7 95       	ror	r31
    182e:	e7 95       	ror	r30
    1830:	9f 5f       	subi	r25, 0xFF	; 255
    1832:	c1 f7       	brne	.-16     	; 0x1824 <__mulsf3_pse+0x8c>
    1834:	fe 2b       	or	r31, r30
    1836:	88 0f       	add	r24, r24
    1838:	91 1d       	adc	r25, r1
    183a:	96 95       	lsr	r25
    183c:	87 95       	ror	r24
    183e:	97 f9       	bld	r25, 7
    1840:	08 95       	ret

00001842 <do_rand>:
    1842:	8f 92       	push	r8
    1844:	9f 92       	push	r9
    1846:	af 92       	push	r10
    1848:	bf 92       	push	r11
    184a:	cf 92       	push	r12
    184c:	df 92       	push	r13
    184e:	ef 92       	push	r14
    1850:	ff 92       	push	r15
    1852:	cf 93       	push	r28
    1854:	df 93       	push	r29
    1856:	ec 01       	movw	r28, r24
    1858:	68 81       	ld	r22, Y
    185a:	79 81       	ldd	r23, Y+1	; 0x01
    185c:	8a 81       	ldd	r24, Y+2	; 0x02
    185e:	9b 81       	ldd	r25, Y+3	; 0x03
    1860:	61 15       	cp	r22, r1
    1862:	71 05       	cpc	r23, r1
    1864:	81 05       	cpc	r24, r1
    1866:	91 05       	cpc	r25, r1
    1868:	21 f4       	brne	.+8      	; 0x1872 <do_rand+0x30>
    186a:	64 e2       	ldi	r22, 0x24	; 36
    186c:	79 ed       	ldi	r23, 0xD9	; 217
    186e:	8b e5       	ldi	r24, 0x5B	; 91
    1870:	97 e0       	ldi	r25, 0x07	; 7
    1872:	2d e1       	ldi	r18, 0x1D	; 29
    1874:	33 ef       	ldi	r19, 0xF3	; 243
    1876:	41 e0       	ldi	r20, 0x01	; 1
    1878:	50 e0       	ldi	r21, 0x00	; 0
    187a:	0e 94 a8 0c 	call	0x1950	; 0x1950 <__divmodsi4>
    187e:	49 01       	movw	r8, r18
    1880:	5a 01       	movw	r10, r20
    1882:	9b 01       	movw	r18, r22
    1884:	ac 01       	movw	r20, r24
    1886:	a7 ea       	ldi	r26, 0xA7	; 167
    1888:	b1 e4       	ldi	r27, 0x41	; 65
    188a:	0e 94 95 0c 	call	0x192a	; 0x192a <__muluhisi3>
    188e:	6b 01       	movw	r12, r22
    1890:	7c 01       	movw	r14, r24
    1892:	ac ee       	ldi	r26, 0xEC	; 236
    1894:	b4 ef       	ldi	r27, 0xF4	; 244
    1896:	a5 01       	movw	r20, r10
    1898:	94 01       	movw	r18, r8
    189a:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__mulohisi3>
    189e:	c6 0e       	add	r12, r22
    18a0:	d7 1e       	adc	r13, r23
    18a2:	e8 1e       	adc	r14, r24
    18a4:	f9 1e       	adc	r15, r25
    18a6:	f7 fe       	sbrs	r15, 7
    18a8:	06 c0       	rjmp	.+12     	; 0x18b6 <do_rand+0x74>
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	c8 1a       	sub	r12, r24
    18ae:	d1 08       	sbc	r13, r1
    18b0:	e1 08       	sbc	r14, r1
    18b2:	80 e8       	ldi	r24, 0x80	; 128
    18b4:	f8 0a       	sbc	r15, r24
    18b6:	c8 82       	st	Y, r12
    18b8:	d9 82       	std	Y+1, r13	; 0x01
    18ba:	ea 82       	std	Y+2, r14	; 0x02
    18bc:	fb 82       	std	Y+3, r15	; 0x03
    18be:	c6 01       	movw	r24, r12
    18c0:	9f 77       	andi	r25, 0x7F	; 127
    18c2:	df 91       	pop	r29
    18c4:	cf 91       	pop	r28
    18c6:	ff 90       	pop	r15
    18c8:	ef 90       	pop	r14
    18ca:	df 90       	pop	r13
    18cc:	cf 90       	pop	r12
    18ce:	bf 90       	pop	r11
    18d0:	af 90       	pop	r10
    18d2:	9f 90       	pop	r9
    18d4:	8f 90       	pop	r8
    18d6:	08 95       	ret

000018d8 <rand_r>:
    18d8:	0e 94 21 0c 	call	0x1842	; 0x1842 <do_rand>
    18dc:	08 95       	ret

000018de <rand>:
    18de:	87 e0       	ldi	r24, 0x07	; 7
    18e0:	91 e0       	ldi	r25, 0x01	; 1
    18e2:	0e 94 21 0c 	call	0x1842	; 0x1842 <do_rand>
    18e6:	08 95       	ret

000018e8 <srand>:
    18e8:	a0 e0       	ldi	r26, 0x00	; 0
    18ea:	b0 e0       	ldi	r27, 0x00	; 0
    18ec:	80 93 07 01 	sts	0x0107, r24
    18f0:	90 93 08 01 	sts	0x0108, r25
    18f4:	a0 93 09 01 	sts	0x0109, r26
    18f8:	b0 93 0a 01 	sts	0x010A, r27
    18fc:	08 95       	ret

000018fe <__eerd_byte_m328p>:
    18fe:	f9 99       	sbic	0x1f, 1	; 31
    1900:	fe cf       	rjmp	.-4      	; 0x18fe <__eerd_byte_m328p>
    1902:	92 bd       	out	0x22, r25	; 34
    1904:	81 bd       	out	0x21, r24	; 33
    1906:	f8 9a       	sbi	0x1f, 0	; 31
    1908:	99 27       	eor	r25, r25
    190a:	80 b5       	in	r24, 0x20	; 32
    190c:	08 95       	ret

0000190e <__eewr_byte_m328p>:
    190e:	26 2f       	mov	r18, r22

00001910 <__eewr_r18_m328p>:
    1910:	f9 99       	sbic	0x1f, 1	; 31
    1912:	fe cf       	rjmp	.-4      	; 0x1910 <__eewr_r18_m328p>
    1914:	1f ba       	out	0x1f, r1	; 31
    1916:	92 bd       	out	0x22, r25	; 34
    1918:	81 bd       	out	0x21, r24	; 33
    191a:	20 bd       	out	0x20, r18	; 32
    191c:	0f b6       	in	r0, 0x3f	; 63
    191e:	f8 94       	cli
    1920:	fa 9a       	sbi	0x1f, 2	; 31
    1922:	f9 9a       	sbi	0x1f, 1	; 31
    1924:	0f be       	out	0x3f, r0	; 63
    1926:	01 96       	adiw	r24, 0x01	; 1
    1928:	08 95       	ret

0000192a <__muluhisi3>:
    192a:	0e 94 f5 09 	call	0x13ea	; 0x13ea <__umulhisi3>
    192e:	a5 9f       	mul	r26, r21
    1930:	90 0d       	add	r25, r0
    1932:	b4 9f       	mul	r27, r20
    1934:	90 0d       	add	r25, r0
    1936:	a4 9f       	mul	r26, r20
    1938:	80 0d       	add	r24, r0
    193a:	91 1d       	adc	r25, r1
    193c:	11 24       	eor	r1, r1
    193e:	08 95       	ret

00001940 <__mulshisi3>:
    1940:	b7 ff       	sbrs	r27, 7
    1942:	0c 94 95 0c 	jmp	0x192a	; 0x192a <__muluhisi3>

00001946 <__mulohisi3>:
    1946:	0e 94 95 0c 	call	0x192a	; 0x192a <__muluhisi3>
    194a:	82 1b       	sub	r24, r18
    194c:	93 0b       	sbc	r25, r19
    194e:	08 95       	ret

00001950 <__divmodsi4>:
    1950:	05 2e       	mov	r0, r21
    1952:	97 fb       	bst	r25, 7
    1954:	1e f4       	brtc	.+6      	; 0x195c <__divmodsi4+0xc>
    1956:	00 94       	com	r0
    1958:	0e 94 bf 0c 	call	0x197e	; 0x197e <__negsi2>
    195c:	57 fd       	sbrc	r21, 7
    195e:	07 d0       	rcall	.+14     	; 0x196e <__divmodsi4_neg2>
    1960:	0e 94 c7 0c 	call	0x198e	; 0x198e <__udivmodsi4>
    1964:	07 fc       	sbrc	r0, 7
    1966:	03 d0       	rcall	.+6      	; 0x196e <__divmodsi4_neg2>
    1968:	4e f4       	brtc	.+18     	; 0x197c <__divmodsi4_exit>
    196a:	0c 94 bf 0c 	jmp	0x197e	; 0x197e <__negsi2>

0000196e <__divmodsi4_neg2>:
    196e:	50 95       	com	r21
    1970:	40 95       	com	r20
    1972:	30 95       	com	r19
    1974:	21 95       	neg	r18
    1976:	3f 4f       	sbci	r19, 0xFF	; 255
    1978:	4f 4f       	sbci	r20, 0xFF	; 255
    197a:	5f 4f       	sbci	r21, 0xFF	; 255

0000197c <__divmodsi4_exit>:
    197c:	08 95       	ret

0000197e <__negsi2>:
    197e:	90 95       	com	r25
    1980:	80 95       	com	r24
    1982:	70 95       	com	r23
    1984:	61 95       	neg	r22
    1986:	7f 4f       	sbci	r23, 0xFF	; 255
    1988:	8f 4f       	sbci	r24, 0xFF	; 255
    198a:	9f 4f       	sbci	r25, 0xFF	; 255
    198c:	08 95       	ret

0000198e <__udivmodsi4>:
    198e:	a1 e2       	ldi	r26, 0x21	; 33
    1990:	1a 2e       	mov	r1, r26
    1992:	aa 1b       	sub	r26, r26
    1994:	bb 1b       	sub	r27, r27
    1996:	fd 01       	movw	r30, r26
    1998:	0d c0       	rjmp	.+26     	; 0x19b4 <__udivmodsi4_ep>

0000199a <__udivmodsi4_loop>:
    199a:	aa 1f       	adc	r26, r26
    199c:	bb 1f       	adc	r27, r27
    199e:	ee 1f       	adc	r30, r30
    19a0:	ff 1f       	adc	r31, r31
    19a2:	a2 17       	cp	r26, r18
    19a4:	b3 07       	cpc	r27, r19
    19a6:	e4 07       	cpc	r30, r20
    19a8:	f5 07       	cpc	r31, r21
    19aa:	20 f0       	brcs	.+8      	; 0x19b4 <__udivmodsi4_ep>
    19ac:	a2 1b       	sub	r26, r18
    19ae:	b3 0b       	sbc	r27, r19
    19b0:	e4 0b       	sbc	r30, r20
    19b2:	f5 0b       	sbc	r31, r21

000019b4 <__udivmodsi4_ep>:
    19b4:	66 1f       	adc	r22, r22
    19b6:	77 1f       	adc	r23, r23
    19b8:	88 1f       	adc	r24, r24
    19ba:	99 1f       	adc	r25, r25
    19bc:	1a 94       	dec	r1
    19be:	69 f7       	brne	.-38     	; 0x199a <__udivmodsi4_loop>
    19c0:	60 95       	com	r22
    19c2:	70 95       	com	r23
    19c4:	80 95       	com	r24
    19c6:	90 95       	com	r25
    19c8:	9b 01       	movw	r18, r22
    19ca:	ac 01       	movw	r20, r24
    19cc:	bd 01       	movw	r22, r26
    19ce:	cf 01       	movw	r24, r30
    19d0:	08 95       	ret

000019d2 <_exit>:
    19d2:	f8 94       	cli

000019d4 <__stop_program>:
    19d4:	ff cf       	rjmp	.-2      	; 0x19d4 <__stop_program>
